<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>YangJun-Ux BLOG</title>
    <link>https://yangjun-ux.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>@데이터 사이언스, @머신러닝, @AI 개발자, @SeoulNationalUniversity</description>
    <pubDate>Mon, 11 May 2020 07:50:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>회귀분석 프로젝트 - Dacon 온도추정 경진대회</title>
      <link>https://yangjun-ux.github.io/2020/04/18/final_blog/</link>
      <guid>https://yangjun-ux.github.io/2020/04/18/final_blog/</guid>
      <pubDate>Sat, 18 Apr 2020 10:16:00 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;Dacon-온도추정-경진대회&quot;&gt;&lt;a href=&quot;#Dacon-온도추정-경진대회&quot; class=&quot;headerlink&quot; title=&quot;Dacon 온도추정 경진대회&quot;&gt;&lt;/a&gt;Dacon 온도추정 경진대회&lt;/h3&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="Dacon-온도추정-경진대회"><a href="#Dacon-온도추정-경진대회" class="headerlink" title="Dacon 온도추정 경진대회"></a>Dacon 온도추정 경진대회</h3><a id="more"></a><blockquote><h1 id="회귀분석-프로젝트"><a href="#회귀분석-프로젝트" class="headerlink" title="회귀분석 프로젝트"></a>회귀분석 프로젝트</h1></blockquote><blockquote><h1 id="회귀분석-프로젝트-온도-추정-경진대회"><a href="#회귀분석-프로젝트-온도-추정-경진대회" class="headerlink" title="회귀분석 프로젝트 : 온도 추정 경진대회"></a>회귀분석 프로젝트 : 온도 추정 경진대회</h1></blockquote><ul><li><h3 id="데이콘-온도추정-경진대회-데이터-활용"><a href="#데이콘-온도추정-경진대회-데이터-활용" class="headerlink" title="데이콘 온도추정 경진대회 데이터 활용"></a>데이콘 온도추정 경진대회 데이터 활용</h3></li></ul><img src="/2020/04/18/final_blog/dacon.png" class><blockquote><h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3></blockquote><ul><li><strong>데이터 설명</strong></li><li><strong>분석과정</strong></li><li><strong>데이터 전처리</strong></li><li><strong>KFold 검증</strong><ul><li>Y00 ~ Y17</li></ul></li><li><strong>Lasso, Ridge, EN 정규화</strong><ul><li>Y18</li></ul></li><li><strong>전체 데이터를 활용한 Y18모델</strong></li><li><strong>+) 머신러닝 활용</strong></li></ul><blockquote><h3 id="목표-성능"><a href="#목표-성능" class="headerlink" title="목표 성능"></a>목표 성능</h3></blockquote><ul><li>test MSE 3.5 이하로 만들기 -&gt; 3.94</li><li>최종순위 20등 이내 -&gt; 40위</li></ul><blockquote><h2 id="데이터-설명"><a href="#데이터-설명" class="headerlink" title="데이터 설명"></a>데이터 설명</h2></blockquote><ul><li>대전지역에서 측정한 실내외 19곳의 센서데이터와 주변 지역의 기상청 공공데이터를 semi-비식별화하여 제공합니다. <ul><li>센서는 온도를 측정하였습니다. </li><li>모든 데이터는 시간 순으로 정렬 되어 있으며 10분 단위 데이터 입니다. </li><li>예측 대상(target variable)은 Y18입니다. </li></ul></li></ul><img src="/2020/04/18/final_blog/proj.png" class><img src="/2020/04/18/final_blog/data.png" class><img src="/2020/04/18/final_blog/data2.png" class><blockquote><h3 id="train-csv"><a href="#train-csv" class="headerlink" title="train.csv"></a>train.csv</h3><pre><code>- 30일 간의 기상청 데이터 (X00~X39) 및 센서데이터 (Y00~Y17)- 이후 3일 간의 기상청 데이터 (X00~X39) 및 센서데이터 (Y18)</code></pre><h3 id="test-csv"><a href="#test-csv" class="headerlink" title="test.csv"></a>test.csv</h3><pre><code>- train.csv 기간 이후 80일 간의 기상청 데이터 (X00~X39)</code></pre><h3 id="sample-submission-csv"><a href="#sample-submission-csv" class="headerlink" title="sample_submission.csv"></a>sample_submission.csv</h3><pre><code>- 제출 양식 예시</code></pre></blockquote><ul><li><strong>각 위치에서 기온, 누적강수량, 풍속, 풍향, 해면기압, 현지기압, 일사량, 습도 모두 측정</strong></li></ul><blockquote><h2 id="분석과정"><a href="#분석과정" class="headerlink" title="분석과정"></a>분석과정</h2></blockquote><p><code>id</code> : 시간(10분 단위)<br><code>X00 ~ X39</code> : 기상청 관측 데이터<br><code>&#39;X00&#39;,&#39;X07&#39;,&#39;X28&#39;,&#39;X31&#39;,&#39;X32&#39;</code> : 기온<br><code>&quot;X01&quot;,&quot;X06&quot;,&quot;X22&quot;,&quot;X27&quot;,&quot;X29&quot;</code> : 현지기압 (실제 위치에서의 기압)<br><code>&quot;X02&quot;,&quot;X03&quot;,&quot;X18&quot;,&quot;X24&quot;,&quot;X26&quot;</code> : 풍속<br><code>&quot;X04&quot;,&quot;X10&quot;,&quot;X21&quot;,&quot;X36&quot;,&quot;X39&quot;</code> : 일일 누적강수량<br><code>&quot;X05&quot;,&quot;X08&quot;,&quot;X09&quot;,&quot;X23&quot;,&quot;X33&quot;</code> : 해면기압 (높이를 같다고 가정했을 때 기압)<br><code>&quot;X11&quot;,&quot;X34&quot;</code> : 일일 누적일사량 - X14, X16, X19는 고장<br><code>&quot;X12&quot;,&quot;X20&quot;,&quot;X30&quot;,&quot;X37&quot;,&quot;X38&quot;</code> : 습도<br><code>&#39;Y00&#39;,&#39;Y01&#39;,&#39;Y02&#39;,&#39;Y03&#39;,&#39;Y04&#39;,&#39;Y05&#39;,&#39;Y06&#39;,&#39;Y07&#39;,&#39;Y08&#39;,&#39;Y09&#39;,&#39;Y10&#39;,&#39;Y11&#39;,&#39;Y12&#39;,&#39;Y13&#39;,&#39;Y14&#39;,&#39;Y15&#39;,&#39;Y16&#39;,&#39;Y17&#39;</code> : 센서(기온)</p><blockquote><h2 id="필요한-패키지-import"><a href="#필요한-패키지-import" class="headerlink" title="필요한 패키지 import"></a>필요한 패키지 import</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, accuracy_score, make_scorer</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso, Ridge</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><blockquote><h2 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df= pd.read_csv(<span class="string">'datas/train.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>id</th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>...</th>      <th>Y09</th>      <th>Y10</th>      <th>Y11</th>      <th>Y12</th>      <th>Y13</th>      <th>Y14</th>      <th>Y15</th>      <th>Y16</th>      <th>Y17</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0.0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>...</td>      <td>7.0</td>      <td>7.5</td>      <td>7.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.5</td>      <td>9.0</td>      <td>8.0</td>      <td>9.0</td>      <td>NaN</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0.0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>...</td>      <td>6.5</td>      <td>7.5</td>      <td>7.0</td>      <td>8.5</td>      <td>10.0</td>      <td>9.5</td>      <td>9.0</td>      <td>7.5</td>      <td>9.0</td>      <td>NaN</td>    </tr>    <tr>      <td>2</td>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0.0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>...</td>      <td>6.5</td>      <td>7.5</td>      <td>6.5</td>      <td>8.0</td>      <td>9.5</td>      <td>9.5</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>      <td>NaN</td>    </tr>    <tr>      <td>3</td>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0.0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>...</td>      <td>6.0</td>      <td>7.0</td>      <td>6.0</td>      <td>8.0</td>      <td>9.5</td>      <td>9.0</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>      <td>NaN</td>    </tr>    <tr>      <td>4</td>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0.0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>...</td>      <td>6.0</td>      <td>7.0</td>      <td>6.0</td>      <td>7.5</td>      <td>9.5</td>      <td>9.0</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>      <td>NaN</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4747</td>      <td>4747</td>      <td>19.9</td>      <td>987.6</td>      <td>0.9</td>      <td>0.8</td>      <td>0.0</td>      <td>1006.9</td>      <td>987.7</td>      <td>21.7</td>      <td>1007.5</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>21.5</td>    </tr>    <tr>      <td>4748</td>      <td>4748</td>      <td>19.9</td>      <td>987.6</td>      <td>0.5</td>      <td>0.7</td>      <td>0.0</td>      <td>1006.8</td>      <td>987.7</td>      <td>21.6</td>      <td>1007.5</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>21.5</td>    </tr>    <tr>      <td>4749</td>      <td>4749</td>      <td>19.7</td>      <td>987.7</td>      <td>0.9</td>      <td>0.6</td>      <td>0.0</td>      <td>1006.9</td>      <td>987.6</td>      <td>21.4</td>      <td>1007.4</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>21.5</td>    </tr>    <tr>      <td>4750</td>      <td>4750</td>      <td>19.4</td>      <td>987.7</td>      <td>0.9</td>      <td>0.8</td>      <td>0.0</td>      <td>1006.9</td>      <td>987.8</td>      <td>21.3</td>      <td>1007.6</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>21.5</td>    </tr>    <tr>      <td>4751</td>      <td>4751</td>      <td>19.1</td>      <td>987.6</td>      <td>1.0</td>      <td>0.3</td>      <td>0.0</td>      <td>1006.8</td>      <td>987.8</td>      <td>21.2</td>      <td>1007.5</td>      <td>...</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>21.0</td>    </tr>  </tbody></table><p>4752 rows × 60 columns</p></div><blockquote><h2 id="데이터-종류에-따라-나누기"><a href="#데이터-종류에-따라-나누기" class="headerlink" title="데이터 종류에 따라 나누기"></a>데이터 종류에 따라 나누기</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">temperature_name = [<span class="string">'X00'</span>,<span class="string">'X07'</span>,<span class="string">'X28'</span>,<span class="string">'X31'</span>,<span class="string">'X32'</span>] <span class="comment"># 기온</span></span><br><span class="line">localpress_name  = [<span class="string">"X01"</span>,<span class="string">"X06"</span>,<span class="string">"X22"</span>,<span class="string">"X27"</span>,<span class="string">"X29"</span>] <span class="comment">#현지기압</span></span><br><span class="line">speed_name       = [<span class="string">"X02"</span>,<span class="string">"X03"</span>,<span class="string">"X18"</span>,<span class="string">"X24"</span>,<span class="string">"X26"</span>] <span class="comment">#풍속</span></span><br><span class="line">water_name       = [<span class="string">"X04"</span>,<span class="string">"X10"</span>,<span class="string">"X21"</span>,<span class="string">"X36"</span>,<span class="string">"X39"</span>] <span class="comment">#일일 누적강수량</span></span><br><span class="line">press_name       = [<span class="string">"X05"</span>,<span class="string">"X08"</span>,<span class="string">"X09"</span>,<span class="string">"X23"</span>,<span class="string">"X33"</span>] <span class="comment">#해면기압</span></span><br><span class="line">sun_name         = [<span class="string">"X11"</span>,<span class="string">"X34"</span>] <span class="comment">#일일 누적일사량</span></span><br><span class="line">humidity_name    = [<span class="string">"X12"</span>,<span class="string">"X20"</span>,<span class="string">"X30"</span>,<span class="string">"X37"</span>,<span class="string">"X38"</span>] <span class="comment">#습도</span></span><br><span class="line">direction_name   = [<span class="string">"X13"</span>,<span class="string">"X15"</span>,<span class="string">"X17"</span>,<span class="string">"X25"</span>,<span class="string">"X35"</span>] <span class="comment">#풍향</span></span><br><span class="line">sensor_name = [<span class="string">'Y00'</span>,<span class="string">'Y01'</span>,<span class="string">'Y02'</span>,<span class="string">'Y03'</span>,<span class="string">'Y04'</span>,<span class="string">'Y05'</span>,<span class="string">'Y06'</span>,<span class="string">'Y07'</span>,<span class="string">'Y08'</span>,<span class="string">'Y09'</span>,<span class="string">'Y10'</span>,<span class="string">'Y11'</span>,<span class="string">'Y12'</span>,<span class="string">'Y13'</span>,<span class="string">'Y14'</span>,<span class="string">'Y15'</span>,<span class="string">'Y16'</span>,<span class="string">'Y17'</span>]</span><br></pre></td></tr></table></figure><blockquote><h2 id="시간-컬럼-추가"><a href="#시간-컬럼-추가" class="headerlink" title="시간 컬럼 추가"></a>시간 컬럼 추가</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hour= pd.Series((df.index%<span class="number">144</span>/<span class="number">6</span>).astype(int))</span><br><span class="line">df[<span class="string">'hour'</span>] = hour</span><br></pre></td></tr></table></figure><blockquote><h2 id="데이터-전처리"><a href="#데이터-전처리" class="headerlink" title="데이터 전처리"></a>데이터 전처리</h2></blockquote><ul><li><h3 id="풍향"><a href="#풍향" class="headerlink" title="풍향"></a>풍향</h3><ul><li>북동(0), 남동(1), 남서(2), 북서(3)로 <strong>카테고리 변수</strong>로 변경</li></ul></li><li><h3 id="강수량"><a href="#강수량" class="headerlink" title="강수량"></a>강수량</h3><ul><li>현재 데이터는 누적강수량 데이터로 측정시각 이전에 내린 강수량의 합이다.</li><li>현재 온도에 미래의 강수량이 영향을 주지 못하므로, 온도 측정 시각의 누적강수량에서 이전 온도 측정 시각의 누적강수량을 빼서 계산하였다.</li><li>실수형 데이터로 예측모델을 만든 결과보다 카테고리형 데이터로 예측모델을 만들었을 경우 성능이 더 좋아 <strong>카테고리 변수</strong>로 바꾸었다.</li><li>강수량에 따라 0, 1, 2, 3으로 나눈 모델과 강수가 있었을 경우 1, 없었을 경우 0으로 나눈 모델 중 후자가 더 성능이 좋았다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> direction_name:</span><br><span class="line">    df[x] = df[x].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x &lt; <span class="number">90</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">if</span> x &lt; <span class="number">180</span> <span class="keyword">else</span> <span class="number">2</span> <span class="keyword">if</span> x &lt; <span class="number">270</span> <span class="keyword">else</span> <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 북동 : 0 / 남동 : 1 / 남서 : 2 / 북서 : 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> water_name:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(x)):</span><br><span class="line">        df[x].loc[i] = df[x].loc[i] - df[x].loc[i<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> water_name:</span><br><span class="line">    df[x] = df[x].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><h2 id="이전-30일의-데이터-Y18이-없음"><a href="#이전-30일의-데이터-Y18이-없음" class="headerlink" title="이전 30일의 데이터 - Y18이 없음"></a>이전 30일의 데이터 - Y18이 없음</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1 = df.loc[:<span class="number">4319</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.dropna(axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>id</th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>...</th>      <th>Y09</th>      <th>Y10</th>      <th>Y11</th>      <th>Y12</th>      <th>Y13</th>      <th>Y14</th>      <th>Y15</th>      <th>Y16</th>      <th>Y17</th>      <th>hour</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>...</td>      <td>7.0</td>      <td>7.5</td>      <td>7.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.5</td>      <td>9.0</td>      <td>8.0</td>      <td>9.0</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>...</td>      <td>6.5</td>      <td>7.5</td>      <td>7.0</td>      <td>8.5</td>      <td>10.0</td>      <td>9.5</td>      <td>9.0</td>      <td>7.5</td>      <td>9.0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>...</td>      <td>6.5</td>      <td>7.5</td>      <td>6.5</td>      <td>8.0</td>      <td>9.5</td>      <td>9.5</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>...</td>      <td>6.0</td>      <td>7.0</td>      <td>6.0</td>      <td>8.0</td>      <td>9.5</td>      <td>9.0</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>...</td>      <td>6.0</td>      <td>7.0</td>      <td>6.0</td>      <td>7.5</td>      <td>9.5</td>      <td>9.0</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4315</td>      <td>4315</td>      <td>19.5</td>      <td>987.8</td>      <td>1.7</td>      <td>0.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.0</td>      <td>21.3</td>      <td>1007.8</td>      <td>...</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>20.5</td>      <td>20.5</td>      <td>20.0</td>      <td>20.0</td>      <td>20.5</td>      <td>20.0</td>      <td>23</td>    </tr>    <tr>      <td>4316</td>      <td>4316</td>      <td>19.3</td>      <td>987.7</td>      <td>2.1</td>      <td>0.9</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>21.3</td>      <td>1008.0</td>      <td>...</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>20.5</td>      <td>20.5</td>      <td>20.0</td>      <td>19.5</td>      <td>20.5</td>      <td>19.5</td>      <td>23</td>    </tr>    <tr>      <td>4317</td>      <td>4317</td>      <td>19.5</td>      <td>987.8</td>      <td>0.9</td>      <td>1.3</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.2</td>      <td>1008.1</td>      <td>...</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>20.0</td>      <td>20.0</td>      <td>19.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>23</td>    </tr>    <tr>      <td>4318</td>      <td>4318</td>      <td>20.0</td>      <td>987.8</td>      <td>1.4</td>      <td>0.5</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.1</td>      <td>1008.1</td>      <td>...</td>      <td>19.5</td>      <td>20.0</td>      <td>18.5</td>      <td>20.0</td>      <td>20.0</td>      <td>19.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>23</td>    </tr>    <tr>      <td>4319</td>      <td>4319</td>      <td>20.1</td>      <td>987.8</td>      <td>1.2</td>      <td>1.2</td>      <td>0</td>      <td>1007.8</td>      <td>988.2</td>      <td>20.9</td>      <td>1008.1</td>      <td>...</td>      <td>19.5</td>      <td>20.0</td>      <td>18.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.0</td>      <td>23</td>    </tr>  </tbody></table><p>4320 rows × 60 columns</p></div><blockquote><h2 id="이전-30일의-기상청-데이터-X00-X39"><a href="#이전-30일의-기상청-데이터-X00-X39" class="headerlink" title="이전 30일의 기상청 데이터(X00 ~ X39)"></a>이전 30일의 기상청 데이터(X00 ~ X39)</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X_30s = df1.drop(columns=sensor_name)</span><br><span class="line">X_30s.drop(columns=[<span class="string">'X14'</span>, <span class="string">'X16'</span>, <span class="string">'X19'</span>, <span class="string">'id'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">X_30s</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X31</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>1009.8</td>      <td>...</td>      <td>8.2</td>      <td>10.7</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.2</td>      <td>62.6</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>1009.9</td>      <td>...</td>      <td>8.3</td>      <td>10.3</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.5</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>1010.1</td>      <td>...</td>      <td>8.0</td>      <td>9.7</td>      <td>1010.0</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.9</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>1010.0</td>      <td>...</td>      <td>7.7</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.5</td>      <td>64.5</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>1010.0</td>      <td>...</td>      <td>7.4</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>78.0</td>      <td>65.0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4315</td>      <td>19.5</td>      <td>987.8</td>      <td>1.7</td>      <td>0.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.0</td>      <td>21.3</td>      <td>1007.8</td>      <td>1007.5</td>      <td>...</td>      <td>18.8</td>      <td>19.4</td>      <td>1008.2</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.3</td>      <td>74.3</td>      <td>0</td>      <td>23</td>    </tr>    <tr>      <td>4316</td>      <td>19.3</td>      <td>987.7</td>      <td>2.1</td>      <td>0.9</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>21.3</td>      <td>1008.0</td>      <td>1007.4</td>      <td>...</td>      <td>18.6</td>      <td>18.5</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.4</td>      <td>74.8</td>      <td>0</td>      <td>23</td>    </tr>    <tr>      <td>4317</td>      <td>19.5</td>      <td>987.8</td>      <td>0.9</td>      <td>1.3</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.2</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>18.4</td>      <td>19.1</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.4</td>      <td>0</td>      <td>23</td>    </tr>    <tr>      <td>4318</td>      <td>20.0</td>      <td>987.8</td>      <td>1.4</td>      <td>0.5</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.1</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>18.2</td>      <td>19.0</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.8</td>      <td>0</td>      <td>23</td>    </tr>    <tr>      <td>4319</td>      <td>20.1</td>      <td>987.8</td>      <td>1.2</td>      <td>1.2</td>      <td>0</td>      <td>1007.8</td>      <td>988.2</td>      <td>20.9</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>18.1</td>      <td>18.5</td>      <td>1008.3</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>83.5</td>      <td>76.9</td>      <td>0</td>      <td>23</td>    </tr>  </tbody></table><p>4320 rows × 38 columns</p></div><blockquote><h2 id="이전-30일의-센서-데이터-Y00-Y17"><a href="#이전-30일의-센서-데이터-Y00-Y17" class="headerlink" title="이전 30일의 센서 데이터(Y00 ~ Y17)"></a>이전 30일의 센서 데이터(Y00 ~ Y17)</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sensor = df1[sensor_name]</span><br><span class="line">sensor</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Y00</th>      <th>Y01</th>      <th>Y02</th>      <th>Y03</th>      <th>Y04</th>      <th>Y05</th>      <th>Y06</th>      <th>Y07</th>      <th>Y08</th>      <th>Y09</th>      <th>Y10</th>      <th>Y11</th>      <th>Y12</th>      <th>Y13</th>      <th>Y14</th>      <th>Y15</th>      <th>Y16</th>      <th>Y17</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>12.5</td>      <td>11.5</td>      <td>11.0</td>      <td>20.0</td>      <td>20.0</td>      <td>10.5</td>      <td>10.0</td>      <td>10.5</td>      <td>10.0</td>      <td>7.0</td>      <td>7.5</td>      <td>7.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.5</td>      <td>9.0</td>      <td>8.0</td>      <td>9.0</td>    </tr>    <tr>      <td>1</td>      <td>12.5</td>      <td>11.0</td>      <td>11.0</td>      <td>20.0</td>      <td>20.0</td>      <td>10.0</td>      <td>9.5</td>      <td>10.0</td>      <td>9.5</td>      <td>6.5</td>      <td>7.5</td>      <td>7.0</td>      <td>8.5</td>      <td>10.0</td>      <td>9.5</td>      <td>9.0</td>      <td>7.5</td>      <td>9.0</td>    </tr>    <tr>      <td>2</td>      <td>12.0</td>      <td>11.0</td>      <td>11.0</td>      <td>19.5</td>      <td>19.5</td>      <td>10.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.0</td>      <td>6.5</td>      <td>7.5</td>      <td>6.5</td>      <td>8.0</td>      <td>9.5</td>      <td>9.5</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>    </tr>    <tr>      <td>3</td>      <td>12.0</td>      <td>11.0</td>      <td>11.0</td>      <td>19.5</td>      <td>19.5</td>      <td>9.5</td>      <td>9.0</td>      <td>9.5</td>      <td>9.0</td>      <td>6.0</td>      <td>7.0</td>      <td>6.0</td>      <td>8.0</td>      <td>9.5</td>      <td>9.0</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>    </tr>    <tr>      <td>4</td>      <td>12.0</td>      <td>10.5</td>      <td>10.5</td>      <td>19.0</td>      <td>19.5</td>      <td>9.5</td>      <td>8.5</td>      <td>9.5</td>      <td>8.5</td>      <td>6.0</td>      <td>7.0</td>      <td>6.0</td>      <td>7.5</td>      <td>9.5</td>      <td>9.0</td>      <td>8.5</td>      <td>7.5</td>      <td>8.5</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4315</td>      <td>22.0</td>      <td>22.5</td>      <td>22.5</td>      <td>26.0</td>      <td>26.0</td>      <td>21.0</td>      <td>20.0</td>      <td>20.5</td>      <td>20.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>20.5</td>      <td>20.5</td>      <td>20.0</td>      <td>20.0</td>      <td>20.5</td>      <td>20.0</td>    </tr>    <tr>      <td>4316</td>      <td>22.0</td>      <td>22.5</td>      <td>22.5</td>      <td>26.0</td>      <td>25.5</td>      <td>21.0</td>      <td>20.0</td>      <td>20.5</td>      <td>20.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>20.5</td>      <td>20.5</td>      <td>20.0</td>      <td>19.5</td>      <td>20.5</td>      <td>19.5</td>    </tr>    <tr>      <td>4317</td>      <td>21.5</td>      <td>22.5</td>      <td>22.5</td>      <td>26.0</td>      <td>25.5</td>      <td>21.0</td>      <td>20.0</td>      <td>20.5</td>      <td>20.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>      <td>20.0</td>      <td>20.0</td>      <td>19.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>    </tr>    <tr>      <td>4318</td>      <td>21.5</td>      <td>22.0</td>      <td>22.0</td>      <td>25.5</td>      <td>25.5</td>      <td>20.5</td>      <td>20.0</td>      <td>20.0</td>      <td>20.0</td>      <td>19.5</td>      <td>20.0</td>      <td>18.5</td>      <td>20.0</td>      <td>20.0</td>      <td>19.5</td>      <td>19.5</td>      <td>20.0</td>      <td>19.0</td>    </tr>    <tr>      <td>4319</td>      <td>21.5</td>      <td>22.0</td>      <td>22.0</td>      <td>25.5</td>      <td>25.5</td>      <td>20.5</td>      <td>19.5</td>      <td>20.0</td>      <td>20.0</td>      <td>19.5</td>      <td>20.0</td>      <td>18.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.5</td>      <td>19.0</td>    </tr>  </tbody></table><p>4320 rows × 18 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">formulas = temperature_name + localpress_name + humidity_name + sun_name + speed_name</span><br><span class="line">formulas = [<span class="string">'scale(&#123;&#125;)'</span>.format(x) <span class="keyword">for</span> x <span class="keyword">in</span> formulas]</span><br><span class="line">formulas</span><br></pre></td></tr></table></figure><pre><code>[&apos;scale(X00)&apos;, &apos;scale(X07)&apos;, &apos;scale(X28)&apos;, &apos;scale(X31)&apos;, &apos;scale(X32)&apos;, &apos;scale(X01)&apos;, &apos;scale(X06)&apos;, &apos;scale(X22)&apos;, &apos;scale(X27)&apos;, &apos;scale(X29)&apos;, &apos;scale(X12)&apos;, &apos;scale(X20)&apos;, &apos;scale(X30)&apos;, &apos;scale(X37)&apos;, &apos;scale(X38)&apos;, &apos;scale(X11)&apos;, &apos;scale(X34)&apos;, &apos;scale(X02)&apos;, &apos;scale(X03)&apos;, &apos;scale(X18)&apos;, &apos;scale(X24)&apos;, &apos;scale(X26)&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">formulas2 = water_name + direction_name</span><br><span class="line">formulas2.append(<span class="string">'hour'</span>)</span><br><span class="line">formulas2 = [<span class="string">'C(&#123;&#125;)'</span>.format(x) <span class="keyword">for</span> x <span class="keyword">in</span> formulas2]</span><br><span class="line">formulas2</span><br></pre></td></tr></table></figure><pre><code>[&apos;C(X04)&apos;, &apos;C(X10)&apos;, &apos;C(X21)&apos;, &apos;C(X36)&apos;, &apos;C(X39)&apos;, &apos;C(X13)&apos;, &apos;C(X15)&apos;, &apos;C(X17)&apos;, &apos;C(X25)&apos;, &apos;C(X35)&apos;, &apos;C(hour)&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formulas = formulas + formulas2</span><br></pre></td></tr></table></figure><blockquote><h2 id="OLS-식-Y00-예측-모델만들기"><a href="#OLS-식-Y00-예측-모델만들기" class="headerlink" title="OLS 식 , Y00 예측 모델만들기"></a>OLS 식 , Y00 예측 모델만들기</h2></blockquote><ul><li>스케일링, 카테고리 변수</li><li>Y00을 포함한 Y00_df 생성</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'+'</span>.join(formulas)</span><br><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>&apos;scale(X00)+scale(X07)+scale(X28)+scale(X31)+scale(X32)+scale(X01)+scale(X06)+scale(X22)+scale(X27)+scale(X29)+scale(X12)+scale(X20)+scale(X30)+scale(X37)+scale(X38)+scale(X11)+scale(X34)+scale(X02)+scale(X03)+scale(X18)+scale(X24)+scale(X26)+C(X04)+C(X10)+C(X21)+C(X36)+C(X39)+C(X13)+C(X15)+C(X17)+C(X25)+C(X35)+C(hour)&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Y00_df = pd.concat([X_30s, sensor[<span class="string">'Y00'</span>]], axis=<span class="number">1</span>)</span><br><span class="line">Y00_df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>      <th>Y00</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>1009.8</td>      <td>...</td>      <td>10.7</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.2</td>      <td>62.6</td>      <td>0</td>      <td>0</td>      <td>12.5</td>    </tr>    <tr>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>1009.9</td>      <td>...</td>      <td>10.3</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.5</td>      <td>0</td>      <td>0</td>      <td>12.5</td>    </tr>    <tr>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>1010.1</td>      <td>...</td>      <td>9.7</td>      <td>1010.0</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.9</td>      <td>0</td>      <td>0</td>      <td>12.0</td>    </tr>    <tr>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.5</td>      <td>64.5</td>      <td>0</td>      <td>0</td>      <td>12.0</td>    </tr>    <tr>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>78.0</td>      <td>65.0</td>      <td>0</td>      <td>0</td>      <td>12.0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4315</td>      <td>19.5</td>      <td>987.8</td>      <td>1.7</td>      <td>0.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.0</td>      <td>21.3</td>      <td>1007.8</td>      <td>1007.5</td>      <td>...</td>      <td>19.4</td>      <td>1008.2</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.3</td>      <td>74.3</td>      <td>0</td>      <td>23</td>      <td>22.0</td>    </tr>    <tr>      <td>4316</td>      <td>19.3</td>      <td>987.7</td>      <td>2.1</td>      <td>0.9</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>21.3</td>      <td>1008.0</td>      <td>1007.4</td>      <td>...</td>      <td>18.5</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.4</td>      <td>74.8</td>      <td>0</td>      <td>23</td>      <td>22.0</td>    </tr>    <tr>      <td>4317</td>      <td>19.5</td>      <td>987.8</td>      <td>0.9</td>      <td>1.3</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.2</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>19.1</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.4</td>      <td>0</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4318</td>      <td>20.0</td>      <td>987.8</td>      <td>1.4</td>      <td>0.5</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.1</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>19.0</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.8</td>      <td>0</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4319</td>      <td>20.1</td>      <td>987.8</td>      <td>1.2</td>      <td>1.2</td>      <td>0</td>      <td>1007.8</td>      <td>988.2</td>      <td>20.9</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>18.5</td>      <td>1008.3</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>83.5</td>      <td>76.9</td>      <td>0</td>      <td>23</td>      <td>21.5</td>    </tr>  </tbody></table><p>4320 rows × 39 columns</p></div><blockquote><h2 id="Y00-OLS-Report"><a href="#Y00-OLS-Report" class="headerlink" title="Y00 OLS Report"></a>Y00 OLS Report</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model1 = sm.OLS.from_formula(<span class="string">"Y00 ~ scale(X00)+scale(X07)+scale(X28)+scale(X31)+scale(X32)+scale(X01)+scale(X06)+scale(X22)+scale(X27)+scale(X29)+scale(X12)+scale(X20)+scale(X30)+scale(X37)+scale(X38)+scale(X11)+scale(X34)+scale(X02)+scale(X03)+scale(X18)+scale(X24)+scale(X26)+C(X04)+C(X10)+C(X21)+C(X36)+C(X39)+C(X13)+C(X15)+C(X17)+C(X25)+C(X35)+C(hour)"</span>, Y00_df)</span><br><span class="line">result1 = model1.fit()</span><br><span class="line">print(result1.summary())</span><br></pre></td></tr></table></figure><pre><code>                            OLS Regression Results                            ==============================================================================Dep. Variable:                    Y00   R-squared:                       0.993Model:                            OLS   Adj. R-squared:                  0.993Method:                 Least Squares   F-statistic:                     8823.Date:                Sat, 18 Apr 2020   Prob (F-statistic):               0.00Time:                        14:39:02   Log-Likelihood:                -1831.6No. Observations:                4320   AIC:                             3795.Df Residuals:                    4254   BIC:                             4216.Df Model:                          65                                         Covariance Type:            nonrobust                                         =================================================================================                    coef    std err          t      P&gt;|t|      [0.025      0.975]---------------------------------------------------------------------------------Intercept        21.9936      0.043    509.663      0.000      21.909      22.078C(X04)[T.1]      -0.1483      0.054     -2.724      0.006      -0.255      -0.042C(X10)[T.1]       0.2583      0.071      3.646      0.000       0.119       0.397C(X21)[T.1]      -0.1453      0.069     -2.111      0.035      -0.280      -0.010C(X36)[T.1]      -0.0792      0.055     -1.429      0.153      -0.188       0.029C(X39)[T.1]      -0.0264      0.040     -0.656      0.512      -0.105       0.052C(X13)[T.1]      -0.0262      0.019     -1.399      0.162      -0.063       0.011C(X13)[T.2]      -0.0040      0.016     -0.258      0.796      -0.035       0.027C(X13)[T.3]       0.0225      0.021      1.090      0.276      -0.018       0.063C(X15)[T.1]      -0.0090      0.020     -0.443      0.658      -0.049       0.031C(X15)[T.2]       0.0408      0.019      2.138      0.033       0.003       0.078C(X15)[T.3]       0.0247      0.021      1.172      0.241      -0.017       0.066C(X17)[T.1]      -0.0217      0.020     -1.112      0.266      -0.060       0.017C(X17)[T.2]      -0.0114      0.019     -0.603      0.547      -0.049       0.026C(X17)[T.3]      -0.0262      0.020     -1.317      0.188      -0.065       0.013C(X25)[T.1]      -0.0218      0.024     -0.897      0.370      -0.069       0.026C(X25)[T.2]       0.0802      0.020      3.914      0.000       0.040       0.120C(X25)[T.3]       0.0382      0.018      2.081      0.037       0.002       0.074C(X35)[T.1]       0.0633      0.023      2.742      0.006       0.018       0.108C(X35)[T.2]       0.0510      0.020      2.535      0.011       0.012       0.091C(X35)[T.3]       0.0091      0.021      0.444      0.657      -0.031       0.049C(hour)[T.1]     -0.1131      0.040     -2.851      0.004      -0.191      -0.035C(hour)[T.2]     -0.2216      0.040     -5.543      0.000      -0.300      -0.143C(hour)[T.3]     -0.3348      0.040     -8.272      0.000      -0.414      -0.255C(hour)[T.4]     -0.4096      0.041     -9.969      0.000      -0.490      -0.329C(hour)[T.5]     -0.5497      0.042    -13.096      0.000      -0.632      -0.467C(hour)[T.6]     -0.9854      0.042    -23.581      0.000      -1.067      -0.903C(hour)[T.7]     -1.3939      0.042    -33.197      0.000      -1.476      -1.312C(hour)[T.8]     -1.5723      0.043    -36.336      0.000      -1.657      -1.487C(hour)[T.9]     -1.6007      0.046    -35.118      0.000      -1.690      -1.511C(hour)[T.10]    -1.5496      0.048    -32.255      0.000      -1.644      -1.455C(hour)[T.11]    -1.4606      0.050    -28.934      0.000      -1.560      -1.362C(hour)[T.12]    -1.3289      0.053    -24.914      0.000      -1.433      -1.224C(hour)[T.13]    -1.3072      0.055    -23.769      0.000      -1.415      -1.199C(hour)[T.14]    -1.1328      0.057    -20.037      0.000      -1.244      -1.022C(hour)[T.15]    -0.9958      0.059    -16.972      0.000      -1.111      -0.881C(hour)[T.16]    -0.8724      0.060    -14.451      0.000      -0.991      -0.754C(hour)[T.17]    -0.6048      0.061     -9.920      0.000      -0.724      -0.485C(hour)[T.18]    -0.2100      0.062     -3.395      0.001      -0.331      -0.089C(hour)[T.19]     0.1856      0.062      2.993      0.003       0.064       0.307C(hour)[T.20]     0.1702      0.061      2.781      0.005       0.050       0.290C(hour)[T.21]    -0.0616      0.062     -1.000      0.317      -0.182       0.059C(hour)[T.22]    -0.2288      0.063     -3.652      0.000      -0.352      -0.106C(hour)[T.23]    -0.4915      0.064     -7.712      0.000      -0.616      -0.367scale(X00)       -0.3816      0.042     -9.083      0.000      -0.464      -0.299scale(X07)        3.9408      0.056     69.833      0.000       3.830       4.051scale(X28)        0.6474      0.053     12.245      0.000       0.544       0.751scale(X31)       -0.0514      0.051     -0.999      0.318      -0.152       0.049scale(X32)        0.1671      0.049      3.393      0.001       0.071       0.264scale(X01)        0.1292      0.132      0.977      0.329      -0.130       0.388scale(X06)       -0.1829      0.138     -1.328      0.184      -0.453       0.087scale(X22)        0.6216      0.142      4.392      0.000       0.344       0.899scale(X27)       -0.6094      0.102     -5.997      0.000      -0.809      -0.410scale(X29)        0.0311      0.188      0.165      0.869      -0.338       0.401scale(X12)       -0.0350      0.036     -0.970      0.332      -0.106       0.036scale(X20)        0.0359      0.028      1.278      0.201      -0.019       0.091scale(X30)        0.1846      0.032      5.839      0.000       0.123       0.247scale(X37)       -0.0198      0.029     -0.672      0.502      -0.078       0.038scale(X38)        0.1327      0.027      4.901      0.000       0.080       0.186scale(X11)       -0.4297      0.068     -6.304      0.000      -0.563      -0.296scale(X34)        0.7449      0.070     10.587      0.000       0.607       0.883scale(X02)        0.0242      0.008      3.171      0.002       0.009       0.039scale(X03)        0.0249      0.008      3.133      0.002       0.009       0.041scale(X18)        0.0107      0.009      1.140      0.254      -0.008       0.029scale(X24)       -0.0069      0.010     -0.687      0.492      -0.027       0.013scale(X26)        0.0623      0.010      6.273      0.000       0.043       0.082==============================================================================Omnibus:                       91.277   Durbin-Watson:                   0.552Prob(Omnibus):                  0.000   Jarque-Bera (JB):              128.438Skew:                           0.243   Prob(JB):                     1.29e-28Kurtosis:                       3.691   Cond. No.                         132.==============================================================================Warnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">100</span>))</span><br><span class="line">sm.graphics.plot_ccpr_grid(result1, fig=fig)</span><br><span class="line">fig.suptitle(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_35_0.png" class><blockquote><h2 id="KFold-검증"><a href="#KFold-검증" class="headerlink" title="KFold 검증"></a>KFold 검증</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">kfold = KFold(<span class="number">5</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = len(Y00_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y00_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y00_df.iloc[idx_test]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model0 = sm.OLS.from_formula(<span class="string">"Y00 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result0 = model0.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result0.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y00 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y00 - df_test.Y00.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result0.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result0.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y00 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y00 - dfX_test.Y00.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.99272483, 검증 R2 = 0.99242741학습 R2 = 0.99272483, 검증 R2 = 0.99215678학습 R2 = 0.99272483, 검증 R2 = 0.99328929학습 R2 = 0.99272483, 검증 R2 = 0.99281616학습 R2 = 0.99272483, 검증 R2 = 0.992845780.9923736912649597</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y00'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y00'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y00'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_40_0.png" class><blockquote><h2 id="나머지-값들도-KFold-검증"><a href="#나머지-값들도-KFold-검증" class="headerlink" title="나머지 값들도 KFold 검증"></a>나머지 값들도 KFold 검증</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y01_df = pd.concat([X_30s, sensor[<span class="string">'Y01'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y01_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y01_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y01_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model1 = sm.OLS.from_formula(<span class="string">"Y01 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result1 = model1.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result1.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y01 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y01 - df_test.Y01.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result1.rsquared, rsquared))</span><br><span class="line">    </span><br><span class="line">pred = result1.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y01 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y01 - dfX_test.Y01.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.98413713, 검증 R2 = 0.98378369학습 R2 = 0.98413713, 검증 R2 = 0.98328775학습 R2 = 0.98413713, 검증 R2 = 0.98360291학습 R2 = 0.98413713, 검증 R2 = 0.98524484학습 R2 = 0.98413713, 검증 R2 = 0.984587870.9812739427374754</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y01'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y01'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y01'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_43_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y02_df = pd.concat([X_30s, sensor[<span class="string">'Y02'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y02_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y02_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y02_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model2 = sm.OLS.from_formula(<span class="string">"Y02 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result2 = model2.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result2.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y02 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y02 - df_test.Y02.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result2.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result2.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y02 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y02 - dfX_test.Y02.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.98337319, 검증 R2 = 0.98398663학습 R2 = 0.98337319, 검증 R2 = 0.98194591학습 R2 = 0.98337319, 검증 R2 = 0.98332113학습 R2 = 0.98337319, 검증 R2 = 0.98376697학습 R2 = 0.98337319, 검증 R2 = 0.983643820.9813744364414267</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y02'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y02'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y02'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_45_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y03_df = pd.concat([X_30s, sensor[<span class="string">'Y03'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y03_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y03_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y03_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model3 = sm.OLS.from_formula(<span class="string">"Y03 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result3 = model3.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result3.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y03 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y03 - df_test.Y03.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result3.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result3.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y03 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y03 - dfX_test.Y03.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.94846634, 검증 R2 = 0.94657794학습 R2 = 0.94846634, 검증 R2 = 0.94653673학습 R2 = 0.94846634, 검증 R2 = 0.95014468학습 R2 = 0.94846634, 검증 R2 = 0.95104291학습 R2 = 0.94846634, 검증 R2 = 0.947979480.9473344365714368</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y03'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y03'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y03'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_47_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Y04_df = pd.concat([X_30s, sensor[<span class="string">'Y04'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y04_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y04_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y04_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line">cv = KFold(<span class="number">5</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">13</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(cv.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model4 = sm.OLS.from_formula(<span class="string">"Y04 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result4 = model4.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result4.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y04 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y04 - df_test.Y04.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result4.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result4.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y04 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y04 - dfX_test.Y04.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.94796568, 검증 R2 = 0.94734167학습 R2 = 0.94796568, 검증 R2 = 0.94561380학습 R2 = 0.94796568, 검증 R2 = 0.94708696학습 R2 = 0.94796568, 검증 R2 = 0.95117340학습 R2 = 0.94796568, 검증 R2 = 0.948487450.9466163967513248</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y04'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y04'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y04'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_49_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y05_df = pd.concat([X_30s, sensor[<span class="string">'Y05'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y05_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y05_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y05_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model5 = sm.OLS.from_formula(<span class="string">"Y05 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result5 = model5.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result5.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y05 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y05 - df_test.Y05.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result5.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result5.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y05 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y05 - dfX_test.Y05.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.94777908, 검증 R2 = 0.94299018학습 R2 = 0.94777908, 검증 R2 = 0.94408928학습 R2 = 0.94777908, 검증 R2 = 0.94572819학습 R2 = 0.94777908, 검증 R2 = 0.94986888학습 R2 = 0.94777908, 검증 R2 = 0.955408270.9406042424726812</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y05'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y05'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y05'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_51_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y06_df = pd.concat([X_30s, sensor[<span class="string">'Y06'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y06_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y06_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y06_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model6 = sm.OLS.from_formula(<span class="string">"Y06 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result6 = model6.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result6.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y06 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y06 - df_test.Y06.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result6.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result6.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y06 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y06 - dfX_test.Y06.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.93753514, 검증 R2 = 0.93838017학습 R2 = 0.93753514, 검증 R2 = 0.93545692학습 R2 = 0.93753514, 검증 R2 = 0.93884759학습 R2 = 0.93753514, 검증 R2 = 0.93079795학습 R2 = 0.93753514, 검증 R2 = 0.943468280.9330361936783402</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y06'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y06'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y06'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_53_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y07_df = pd.concat([X_30s, sensor[<span class="string">'Y07'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y07_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y07_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y07_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model7 = sm.OLS.from_formula(<span class="string">"Y07 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result7 = model7.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result7.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y07 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y07 - df_test.Y07.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result7.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result7.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y07 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y07 - dfX_test.Y07.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.89336104, 검증 R2 = 0.88463988학습 R2 = 0.89336104, 검증 R2 = 0.89507160학습 R2 = 0.89336104, 검증 R2 = 0.90083034학습 R2 = 0.89336104, 검증 R2 = 0.87764882학습 R2 = 0.89336104, 검증 R2 = 0.907396590.8867440441794064</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y07'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y07'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y07'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_55_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y08_df = pd.concat([X_30s, sensor[<span class="string">'Y08'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y08_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y08_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y08_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model8 = sm.OLS.from_formula(<span class="string">"Y08 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result8 = model8.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result8.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y08 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y08 - df_test.Y08.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result8.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result8.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y08 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y08 - dfX_test.Y08.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.93860214, 검증 R2 = 0.93855661학습 R2 = 0.93860214, 검증 R2 = 0.93569780학습 R2 = 0.93860214, 검증 R2 = 0.93912749학습 R2 = 0.93860214, 검증 R2 = 0.93465834학습 R2 = 0.93860214, 검증 R2 = 0.944189880.9277941979411815</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y08'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y08'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y08'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_57_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y09_df = pd.concat([X_30s, sensor[<span class="string">'Y09'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y09_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y09_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y09_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model9 = sm.OLS.from_formula(<span class="string">"Y09 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result9 = model9.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result9.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y09 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y09 - df_test.Y09.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result9.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result9.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y09 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y09 - dfX_test.Y09.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.97479786, 검증 R2 = 0.97486045학습 R2 = 0.97479786, 검증 R2 = 0.97286052학습 R2 = 0.97479786, 검증 R2 = 0.97321239학습 R2 = 0.97479786, 검증 R2 = 0.97642863학습 R2 = 0.97479786, 검증 R2 = 0.976406870.9711646789042401</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y09'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y09'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y09'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_59_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y10_df = pd.concat([X_30s, sensor[<span class="string">'Y10'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y10_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y10_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y10_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model10 = sm.OLS.from_formula(<span class="string">"Y10 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result10 = model10.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result10.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y10 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y10 - df_test.Y10.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result10.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result10.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y10 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y10 - dfX_test.Y10.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.97589977, 검증 R2 = 0.97627704학습 R2 = 0.97589977, 검증 R2 = 0.97351250학습 R2 = 0.97589977, 검증 R2 = 0.97526803학습 R2 = 0.97589977, 검증 R2 = 0.97882271학습 R2 = 0.97589977, 검증 R2 = 0.975256760.9710476924723909</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y10'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y10'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y10'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_61_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y11_df = pd.concat([X_30s, sensor[<span class="string">'Y11'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y11_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y11_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y11_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model11 = sm.OLS.from_formula(<span class="string">"Y11 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result11 = model11.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result11.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y11 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y11 - df_test.Y11.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result11.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result11.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y11 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y11 - dfX_test.Y11.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.97119857, 검증 R2 = 0.97285008학습 R2 = 0.97119857, 검증 R2 = 0.96713121학습 R2 = 0.97119857, 검증 R2 = 0.96954841학습 R2 = 0.97119857, 검증 R2 = 0.97423509학습 R2 = 0.97119857, 검증 R2 = 0.971845500.9651365225146471</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y11'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y11'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y11'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_63_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y12_df = pd.concat([X_30s, sensor[<span class="string">'Y12'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y12_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y12_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y12_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model12 = sm.OLS.from_formula(<span class="string">"Y12 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result12 = model12.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result12.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y12 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y12 - df_test.Y12.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result12.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result12.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y12 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y12 - dfX_test.Y12.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.93043914, 검증 R2 = 0.92730076학습 R2 = 0.93043914, 검증 R2 = 0.92779232학습 R2 = 0.93043914, 검증 R2 = 0.93719237학습 R2 = 0.93043914, 검증 R2 = 0.92444176학습 R2 = 0.93043914, 검증 R2 = 0.934353590.9258530541128716</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y12'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y12'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y12'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_65_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y13_df = pd.concat([X_30s, sensor[<span class="string">'Y13'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y13_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y13_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y13_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model13 = sm.OLS.from_formula(<span class="string">"Y13 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result13 = model13.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result13.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y13 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y13 - df_test.Y13.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result13.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result13.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y13 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y13 - dfX_test.Y13.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.97551170, 검증 R2 = 0.97691878학습 R2 = 0.97551170, 검증 R2 = 0.97502043학습 R2 = 0.97551170, 검증 R2 = 0.97650240학습 R2 = 0.97551170, 검증 R2 = 0.97279838학습 R2 = 0.97551170, 검증 R2 = 0.976155780.9723087570476632</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y13'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y13'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y13'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_67_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y14_df = pd.concat([X_30s, sensor[<span class="string">'Y14'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y14_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y14_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y14_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model14 = sm.OLS.from_formula(<span class="string">"Y14 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result14 = model14.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result14.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y14 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y14 - df_test.Y14.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result14.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result14.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y14 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y14 - dfX_test.Y14.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.95055229, 검증 R2 = 0.95174316학습 R2 = 0.95055229, 검증 R2 = 0.95003596학습 R2 = 0.95055229, 검증 R2 = 0.95233452학습 R2 = 0.95055229, 검증 R2 = 0.94609319학습 R2 = 0.95055229, 검증 R2 = 0.952077060.9433902924785645</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y14'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y14'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y14'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_69_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y15_df = pd.concat([X_30s, sensor[<span class="string">'Y15'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y15_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y15_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y15_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model15 = sm.OLS.from_formula(<span class="string">"Y15 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result15 = model15.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result15.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y15 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y15 - df_test.Y15.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result15.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result15.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y15 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y15 - dfX_test.Y15.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.97086836, 검증 R2 = 0.97222260학습 R2 = 0.97086836, 검증 R2 = 0.97190213학습 R2 = 0.97086836, 검증 R2 = 0.96797335학습 R2 = 0.97086836, 검증 R2 = 0.97158117학습 R2 = 0.97086836, 검증 R2 = 0.970707770.9673690894807192</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y15'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y15'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y15'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_71_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y16_df = pd.concat([X_30s, sensor[<span class="string">'Y16'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y16_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y16_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y16_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model16 = sm.OLS.from_formula(<span class="string">"Y16 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result16 = model16.fit()</span><br><span class="line">    b</span><br><span class="line">    pred = result16.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y16 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y16 - df_test.Y16.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result16.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result16.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y16 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y16 - dfX_test.Y16.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.96814730, 검증 R2 = 0.96684993학습 R2 = 0.96814730, 검증 R2 = 0.96568806학습 R2 = 0.96814730, 검증 R2 = 0.96983776학습 R2 = 0.96814730, 검증 R2 = 0.96852404학습 R2 = 0.96814730, 검증 R2 = 0.969300780.9635284816353513</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y16'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y16'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y16'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_73_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Y17_df = pd.concat([X_30s, sensor[<span class="string">'Y17'</span>]], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">N = len(Y17_df)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y17_df.iloc[idx_train]</span><br><span class="line">dfX_test = Y17_df.iloc[idx_test]</span><br><span class="line"></span><br><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model17 = sm.OLS.from_formula(<span class="string">"Y17 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result17 = model17.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result17.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y17 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y17 - df_test.Y17.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result17.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result17.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y17 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y17 - dfX_test.Y17.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.95399940, 검증 R2 = 0.95549371학습 R2 = 0.95399940, 검증 R2 = 0.95233226학습 R2 = 0.95399940, 검증 R2 = 0.95487363학습 R2 = 0.95399940, 검증 R2 = 0.95520874학습 R2 = 0.95399940, 검증 R2 = 0.951703760.9495062343625932</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y17'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y17'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y17'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_75_0.png" class><blockquote><h2 id="모델을-활용한-이후-3일의-Y00-Y17-값-예측"><a href="#모델을-활용한-이후-3일의-Y00-Y17-값-예측" class="headerlink" title="모델을 활용한 이후 3일의 Y00~Y17 값 예측"></a>모델을 활용한 이후 3일의 Y00~Y17 값 예측</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.loc[<span class="number">4320</span>:]</span><br><span class="line">df2.dropna(axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>id</th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>...</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>Y18</th>      <th>hour</th>    </tr>  </thead>  <tbody>    <tr>      <td>4320</td>      <td>4320</td>      <td>19.3</td>      <td>987.7</td>      <td>0.9</td>      <td>2.2</td>      <td>0</td>      <td>1007.7</td>      <td>988.0</td>      <td>20.8</td>      <td>1007.8</td>      <td>...</td>      <td>18.7</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.0</td>      <td>77.6</td>      <td>0</td>      <td>20.5</td>      <td>0</td>    </tr>    <tr>      <td>4321</td>      <td>4321</td>      <td>19.0</td>      <td>987.6</td>      <td>1.9</td>      <td>2.2</td>      <td>0</td>      <td>1007.7</td>      <td>988.0</td>      <td>20.6</td>      <td>1007.8</td>      <td>...</td>      <td>19.0</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.4</td>      <td>79.2</td>      <td>0</td>      <td>20.5</td>      <td>0</td>    </tr>    <tr>      <td>4322</td>      <td>4322</td>      <td>19.1</td>      <td>987.6</td>      <td>2.0</td>      <td>1.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.9</td>      <td>...</td>      <td>19.2</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>79.9</td>      <td>0</td>      <td>20.5</td>      <td>0</td>    </tr>    <tr>      <td>4323</td>      <td>4323</td>      <td>19.2</td>      <td>987.7</td>      <td>1.8</td>      <td>1.5</td>      <td>0</td>      <td>1007.9</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.9</td>      <td>...</td>      <td>19.3</td>      <td>1008.4</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>80.7</td>      <td>0</td>      <td>20.5</td>      <td>0</td>    </tr>    <tr>      <td>4324</td>      <td>4324</td>      <td>19.2</td>      <td>987.8</td>      <td>1.4</td>      <td>1.4</td>      <td>0</td>      <td>1007.9</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.8</td>      <td>...</td>      <td>19.5</td>      <td>1008.4</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>80.9</td>      <td>0</td>      <td>20.5</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4747</td>      <td>4747</td>      <td>19.9</td>      <td>987.6</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.7</td>      <td>21.7</td>      <td>1007.5</td>      <td>...</td>      <td>19.1</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>82.3</td>      <td>58.6</td>      <td>1</td>      <td>21.5</td>      <td>23</td>    </tr>    <tr>      <td>4748</td>      <td>4748</td>      <td>19.9</td>      <td>987.6</td>      <td>0.5</td>      <td>0.7</td>      <td>0</td>      <td>1006.8</td>      <td>987.7</td>      <td>21.6</td>      <td>1007.5</td>      <td>...</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>82.5</td>      <td>59.1</td>      <td>1</td>      <td>21.5</td>      <td>23</td>    </tr>    <tr>      <td>4749</td>      <td>4749</td>      <td>19.7</td>      <td>987.7</td>      <td>0.9</td>      <td>0.6</td>      <td>0</td>      <td>1006.9</td>      <td>987.6</td>      <td>21.4</td>      <td>1007.4</td>      <td>...</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>83.0</td>      <td>58.9</td>      <td>1</td>      <td>21.5</td>      <td>23</td>    </tr>    <tr>      <td>4750</td>      <td>4750</td>      <td>19.4</td>      <td>987.7</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.8</td>      <td>21.3</td>      <td>1007.6</td>      <td>...</td>      <td>19.3</td>      <td>1007.6</td>      <td>22.16</td>      <td>3</td>      <td>0</td>      <td>83.2</td>      <td>59.8</td>      <td>1</td>      <td>21.5</td>      <td>23</td>    </tr>    <tr>      <td>4751</td>      <td>4751</td>      <td>19.1</td>      <td>987.6</td>      <td>1.0</td>      <td>0.3</td>      <td>0</td>      <td>1006.8</td>      <td>987.8</td>      <td>21.2</td>      <td>1007.5</td>      <td>...</td>      <td>19.5</td>      <td>1007.7</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>84.0</td>      <td>59.5</td>      <td>1</td>      <td>21.0</td>      <td>23</td>    </tr>  </tbody></table><p>432 rows × 43 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_3s = df2.drop(columns=[<span class="string">'X14'</span>, <span class="string">'X16'</span>, <span class="string">'X19'</span>, <span class="string">'Y18'</span>, <span class="string">'id'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><h2 id="이후-3일의-기상청데이터"><a href="#이후-3일의-기상청데이터" class="headerlink" title="이후 3일의 기상청데이터"></a>이후 3일의 기상청데이터</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_3s</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X31</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>    </tr>  </thead>  <tbody>    <tr>      <td>4320</td>      <td>19.3</td>      <td>987.7</td>      <td>0.9</td>      <td>2.2</td>      <td>0</td>      <td>1007.7</td>      <td>988.0</td>      <td>20.8</td>      <td>1007.8</td>      <td>1007.4</td>      <td>...</td>      <td>18.0</td>      <td>18.7</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.0</td>      <td>77.6</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4321</td>      <td>19.0</td>      <td>987.6</td>      <td>1.9</td>      <td>2.2</td>      <td>0</td>      <td>1007.7</td>      <td>988.0</td>      <td>20.6</td>      <td>1007.8</td>      <td>1007.4</td>      <td>...</td>      <td>17.7</td>      <td>19.0</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.4</td>      <td>79.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4322</td>      <td>19.1</td>      <td>987.6</td>      <td>2.0</td>      <td>1.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.9</td>      <td>1007.4</td>      <td>...</td>      <td>17.4</td>      <td>19.2</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>79.9</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4323</td>      <td>19.2</td>      <td>987.7</td>      <td>1.8</td>      <td>1.5</td>      <td>0</td>      <td>1007.9</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.9</td>      <td>1007.5</td>      <td>...</td>      <td>17.5</td>      <td>19.3</td>      <td>1008.4</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>80.7</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4324</td>      <td>19.2</td>      <td>987.8</td>      <td>1.4</td>      <td>1.4</td>      <td>0</td>      <td>1007.9</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.8</td>      <td>1007.6</td>      <td>...</td>      <td>17.4</td>      <td>19.5</td>      <td>1008.4</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>80.9</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4747</td>      <td>19.9</td>      <td>987.6</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.7</td>      <td>21.7</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>17.7</td>      <td>19.1</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>82.3</td>      <td>58.6</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>4748</td>      <td>19.9</td>      <td>987.6</td>      <td>0.5</td>      <td>0.7</td>      <td>0</td>      <td>1006.8</td>      <td>987.7</td>      <td>21.6</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>17.7</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>82.5</td>      <td>59.1</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>4749</td>      <td>19.7</td>      <td>987.7</td>      <td>0.9</td>      <td>0.6</td>      <td>0</td>      <td>1006.9</td>      <td>987.6</td>      <td>21.4</td>      <td>1007.4</td>      <td>1007.5</td>      <td>...</td>      <td>17.8</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>83.0</td>      <td>58.9</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>4750</td>      <td>19.4</td>      <td>987.7</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.8</td>      <td>21.3</td>      <td>1007.6</td>      <td>1007.5</td>      <td>...</td>      <td>17.7</td>      <td>19.3</td>      <td>1007.6</td>      <td>22.16</td>      <td>3</td>      <td>0</td>      <td>83.2</td>      <td>59.8</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>4751</td>      <td>19.1</td>      <td>987.6</td>      <td>1.0</td>      <td>0.3</td>      <td>0</td>      <td>1006.8</td>      <td>987.8</td>      <td>21.2</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>17.7</td>      <td>19.5</td>      <td>1007.7</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>84.0</td>      <td>59.5</td>      <td>1</td>      <td>23</td>    </tr>  </tbody></table><p>432 rows × 38 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">model0 = sm.OLS.from_formula(<span class="string">"Y00 ~ 1 +"</span> + a, data=Y00_df)</span><br><span class="line">model1 = sm.OLS.from_formula(<span class="string">"Y01 ~ 1 +"</span> + a, data=Y01_df)</span><br><span class="line">model2 = sm.OLS.from_formula(<span class="string">"Y02 ~ 1 +"</span> + a, data=Y02_df)</span><br><span class="line">model3 = sm.OLS.from_formula(<span class="string">"Y03 ~ 1 +"</span> + a, data=Y03_df)</span><br><span class="line">model4 = sm.OLS.from_formula(<span class="string">"Y04 ~ 1 +"</span> + a, data=Y04_df)</span><br><span class="line">model5 = sm.OLS.from_formula(<span class="string">"Y05 ~ 1 +"</span> + a, data=Y05_df)</span><br><span class="line">model6 = sm.OLS.from_formula(<span class="string">"Y06 ~ 1 +"</span> + a, data=Y06_df)</span><br><span class="line">model7 = sm.OLS.from_formula(<span class="string">"Y07 ~ 1 +"</span> + a, data=Y07_df)</span><br><span class="line">model8 = sm.OLS.from_formula(<span class="string">"Y08 ~ 1 +"</span> + a, data=Y08_df)</span><br><span class="line">model9 = sm.OLS.from_formula(<span class="string">"Y09 ~ 1 +"</span> + a, data=Y09_df)</span><br><span class="line">mode110 = sm.OLS.from_formula(<span class="string">"Y10 ~ 1 +"</span> + a, data=Y10_df)</span><br><span class="line">model11 = sm.OLS.from_formula(<span class="string">"Y11 ~ 1 +"</span> + a, data=Y11_df)</span><br><span class="line">model12 = sm.OLS.from_formula(<span class="string">"Y12 ~ 1 +"</span> + a, data=Y12_df)</span><br><span class="line">model13 = sm.OLS.from_formula(<span class="string">"Y13 ~ 1 +"</span> + a, data=Y13_df)</span><br><span class="line">model14 = sm.OLS.from_formula(<span class="string">"Y14 ~ 1 +"</span> + a, data=Y14_df)</span><br><span class="line">model15 = sm.OLS.from_formula(<span class="string">"Y15 ~ 1 +"</span> + a, data=Y15_df)</span><br><span class="line">model16 = sm.OLS.from_formula(<span class="string">"Y16 ~ 1 +"</span> + a, data=Y16_df)</span><br><span class="line">model17 = sm.OLS.from_formula(<span class="string">"Y17 ~ 1 +"</span> + a, data=Y17_df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models = [model0, model1, model2, model3, model4, model5, model6, model7, model8, model9, model10, model11, model12, model13, model14, model15, model16, model17]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Y_pred = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    result = model.fit()</span><br><span class="line">    result = result.predict(X_3s).round(<span class="number">2</span>)</span><br><span class="line">    Y_pred.append(result)</span><br><span class="line">Y_pred</span><br></pre></td></tr></table></figure><pre><code>[4320    21.36 4321    21.25 4322    21.09 4323    21.03 4324    21.02         ...   4747    22.56 4748    22.44 4749    22.21 4750    22.13 4751    22.02 Length: 432, dtype: float64, 4320    21.83 4321    21.55 4322    21.57 4323    21.35 4324    21.42         ...   4747    22.25 4748    21.99 4749    22.06 4750    21.82 4751    21.43 Length: 432, dtype: float64, 4320    21.58 4321    21.42 4322    21.38 4323    21.30 4324    21.37         ...   4747    22.03 4748    21.86 4749    21.73 4750    21.50 4751    21.34 Length: 432, dtype: float64, 4320    25.63 4321    25.49 4322    25.48 4323    25.24 4324    25.25         ...   4747    27.11 4748    27.09 4749    27.02 4750    26.94 4751    26.84 Length: 432, dtype: float64, 4320    25.70 4321    25.52 4322    25.47 4323    25.24 4324    25.24         ...   4747    27.18 4748    27.14 4749    27.07 4750    26.95 4751    26.84 Length: 432, dtype: float64, 4320    20.22 4321    19.86 4322    20.11 4323    20.02 4324    19.95         ...   4747    19.51 4748    19.39 4749    19.28 4750    19.29 4751    18.73 Length: 432, dtype: float64, 4320    18.43 4321    18.65 4322    18.50 4323    18.72 4324    18.67         ...   4747    17.86 4748    17.81 4749    17.76 4750    17.75 4751    17.81 Length: 432, dtype: float64, 4320    18.44 4321    19.08 4322    18.90 4323    19.42 4324    19.29         ...   4747    18.67 4748    18.59 4749    18.41 4750    18.50 4751    18.89 Length: 432, dtype: float64, 4320    20.46 4321    19.56 4322    19.49 4323    19.72 4324    19.72         ...   4747    18.71 4748    18.73 4749    18.45 4750    18.41 4751    17.68 Length: 432, dtype: float64, 4320    19.21 4321    18.63 4322    18.35 4323    18.45 4324    18.49         ...   4747    17.77 4748    17.91 4749    17.91 4750    17.53 4751    17.39 Length: 432, dtype: float64, 4320    20.82 4321    19.94 4322    20.01 4323    19.85 4324    19.92         ...   4747    19.15 4748    19.29 4749    19.85 4750    19.29 4751    19.14 Length: 432, dtype: float64, 4320    19.03 4321    18.60 4322    18.53 4323    18.48 4324    18.49         ...   4747    17.62 4748    17.78 4749    17.58 4750    17.32 4751    17.21 Length: 432, dtype: float64, 4320    18.23 4321    18.58 4322    18.58 4323    18.69 4324    18.63         ...   4747    18.96 4748    18.77 4749    18.65 4750    18.76 4751    18.71 Length: 432, dtype: float64, 4320    19.66 4321    19.08 4322    18.87 4323    18.87 4324    18.79         ...   4747    19.37 4748    19.34 4749    19.27 4750    19.20 4751    18.74 Length: 432, dtype: float64, 4320    20.33 4321    19.07 4322    18.58 4323    18.80 4324    18.74         ...   4747    19.84 4748    19.96 4749    19.91 4750    19.73 4751    18.81 Length: 432, dtype: float64, 4320    19.40 4321    18.95 4322    18.74 4323    18.78 4324    18.72         ...   4747    19.04 4748    19.08 4749    19.07 4750    18.80 4751    18.68 Length: 432, dtype: float64, 4320    18.74 4321    18.63 4322    18.52 4323    18.57 4324    18.60         ...   4747    17.95 4748    17.98 4749    17.88 4750    17.84 4751    17.69 Length: 432, dtype: float64, 4320    19.58 4321    18.57 4322    18.37 4323    18.78 4324    18.75         ...   4747    17.98 4748    18.20 4749    18.21 4750    17.78 4751    17.44 Length: 432, dtype: float64]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Y = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">10</span>:</span><br><span class="line">        result = <span class="string">'Y0'</span> + str(x)</span><br><span class="line">        Y.append(result)</span><br><span class="line">    <span class="keyword">elif</span> x &gt;= <span class="number">10</span>:</span><br><span class="line">        result = <span class="string">'Y'</span> + str(x)</span><br><span class="line">        Y.append(result)</span><br><span class="line">Y</span><br></pre></td></tr></table></figure><pre><code>[&apos;Y00&apos;, &apos;Y01&apos;, &apos;Y02&apos;, &apos;Y03&apos;, &apos;Y04&apos;, &apos;Y05&apos;, &apos;Y06&apos;, &apos;Y07&apos;, &apos;Y08&apos;, &apos;Y09&apos;, &apos;Y10&apos;, &apos;Y11&apos;, &apos;Y12&apos;, &apos;Y13&apos;, &apos;Y14&apos;, &apos;Y15&apos;, &apos;Y16&apos;, &apos;Y17&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Y_pred = pd.DataFrame(Y_pred)</span><br><span class="line">Y_pred = Y_pred.T</span><br><span class="line">Y_pred.columns =  Y</span><br><span class="line">Y_pred[<span class="string">'hour'</span>] = df2[<span class="string">'hour'</span>]</span><br><span class="line">Y_pred[<span class="string">'Y18'</span>] = df2[<span class="string">'Y18'</span>]</span><br><span class="line">Y_pred</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Y00</th>      <th>Y01</th>      <th>Y02</th>      <th>Y03</th>      <th>Y04</th>      <th>Y05</th>      <th>Y06</th>      <th>Y07</th>      <th>Y08</th>      <th>Y09</th>      <th>Y10</th>      <th>Y11</th>      <th>Y12</th>      <th>Y13</th>      <th>Y14</th>      <th>Y15</th>      <th>Y16</th>      <th>Y17</th>      <th>hour</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>4320</td>      <td>21.36</td>      <td>21.83</td>      <td>21.58</td>      <td>25.63</td>      <td>25.70</td>      <td>20.22</td>      <td>18.43</td>      <td>18.44</td>      <td>20.46</td>      <td>19.21</td>      <td>20.82</td>      <td>19.03</td>      <td>18.23</td>      <td>19.66</td>      <td>20.33</td>      <td>19.40</td>      <td>18.74</td>      <td>19.58</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4321</td>      <td>21.25</td>      <td>21.55</td>      <td>21.42</td>      <td>25.49</td>      <td>25.52</td>      <td>19.86</td>      <td>18.65</td>      <td>19.08</td>      <td>19.56</td>      <td>18.63</td>      <td>19.94</td>      <td>18.60</td>      <td>18.58</td>      <td>19.08</td>      <td>19.07</td>      <td>18.95</td>      <td>18.63</td>      <td>18.57</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4322</td>      <td>21.09</td>      <td>21.57</td>      <td>21.38</td>      <td>25.48</td>      <td>25.47</td>      <td>20.11</td>      <td>18.50</td>      <td>18.90</td>      <td>19.49</td>      <td>18.35</td>      <td>20.01</td>      <td>18.53</td>      <td>18.58</td>      <td>18.87</td>      <td>18.58</td>      <td>18.74</td>      <td>18.52</td>      <td>18.37</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4323</td>      <td>21.03</td>      <td>21.35</td>      <td>21.30</td>      <td>25.24</td>      <td>25.24</td>      <td>20.02</td>      <td>18.72</td>      <td>19.42</td>      <td>19.72</td>      <td>18.45</td>      <td>19.85</td>      <td>18.48</td>      <td>18.69</td>      <td>18.87</td>      <td>18.80</td>      <td>18.78</td>      <td>18.57</td>      <td>18.78</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4324</td>      <td>21.02</td>      <td>21.42</td>      <td>21.37</td>      <td>25.25</td>      <td>25.24</td>      <td>19.95</td>      <td>18.67</td>      <td>19.29</td>      <td>19.72</td>      <td>18.49</td>      <td>19.92</td>      <td>18.49</td>      <td>18.63</td>      <td>18.79</td>      <td>18.74</td>      <td>18.72</td>      <td>18.60</td>      <td>18.75</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4747</td>      <td>22.56</td>      <td>22.25</td>      <td>22.03</td>      <td>27.11</td>      <td>27.18</td>      <td>19.51</td>      <td>17.86</td>      <td>18.67</td>      <td>18.71</td>      <td>17.77</td>      <td>19.15</td>      <td>17.62</td>      <td>18.96</td>      <td>19.37</td>      <td>19.84</td>      <td>19.04</td>      <td>17.95</td>      <td>17.98</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4748</td>      <td>22.44</td>      <td>21.99</td>      <td>21.86</td>      <td>27.09</td>      <td>27.14</td>      <td>19.39</td>      <td>17.81</td>      <td>18.59</td>      <td>18.73</td>      <td>17.91</td>      <td>19.29</td>      <td>17.78</td>      <td>18.77</td>      <td>19.34</td>      <td>19.96</td>      <td>19.08</td>      <td>17.98</td>      <td>18.20</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4749</td>      <td>22.21</td>      <td>22.06</td>      <td>21.73</td>      <td>27.02</td>      <td>27.07</td>      <td>19.28</td>      <td>17.76</td>      <td>18.41</td>      <td>18.45</td>      <td>17.91</td>      <td>19.85</td>      <td>17.58</td>      <td>18.65</td>      <td>19.27</td>      <td>19.91</td>      <td>19.07</td>      <td>17.88</td>      <td>18.21</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4750</td>      <td>22.13</td>      <td>21.82</td>      <td>21.50</td>      <td>26.94</td>      <td>26.95</td>      <td>19.29</td>      <td>17.75</td>      <td>18.50</td>      <td>18.41</td>      <td>17.53</td>      <td>19.29</td>      <td>17.32</td>      <td>18.76</td>      <td>19.20</td>      <td>19.73</td>      <td>18.80</td>      <td>17.84</td>      <td>17.78</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4751</td>      <td>22.02</td>      <td>21.43</td>      <td>21.34</td>      <td>26.84</td>      <td>26.84</td>      <td>18.73</td>      <td>17.81</td>      <td>18.89</td>      <td>17.68</td>      <td>17.39</td>      <td>19.14</td>      <td>17.21</td>      <td>18.71</td>      <td>18.74</td>      <td>18.81</td>      <td>18.68</td>      <td>17.69</td>      <td>17.44</td>      <td>23</td>      <td>21.0</td>    </tr>  </tbody></table><p>432 rows × 20 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = list(Y_pred.columns)</span><br><span class="line">b.remove(<span class="string">'Y18'</span>)</span><br><span class="line">b.remove(<span class="string">'hour'</span>)</span><br><span class="line">b = [<span class="string">'scale(&#123;&#125;)'</span>.format(x) <span class="keyword">for</span> x <span class="keyword">in</span> b]</span><br><span class="line"><span class="string">'+'</span>.join(b)</span><br></pre></td></tr></table></figure><pre><code>&apos;scale(Y00)+scale(Y01)+scale(Y02)+scale(Y03)+scale(Y04)+scale(Y05)+scale(Y06)+scale(Y07)+scale(Y08)+scale(Y09)+scale(Y10)+scale(Y11)+scale(Y12)+scale(Y13)+scale(Y14)+scale(Y15)+scale(Y16)+scale(Y17)&apos;</code></pre><blockquote><h2 id="Y00-Y17로-Y18-예측-모델-만들기"><a href="#Y00-Y17로-Y18-예측-모델-만들기" class="headerlink" title="Y00 ~ Y17로 Y18 예측 모델 만들기"></a>Y00 ~ Y17로 Y18 예측 모델 만들기</h2></blockquote><ul><li>스케일링, formula</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model20 = sm.OLS.from_formula(<span class="string">"Y18 ~ 1 +"</span> + <span class="string">'+'</span>.join(b), Y_pred)</span><br><span class="line">result20 = model20.fit()</span><br><span class="line">print(result20.summary())</span><br></pre></td></tr></table></figure><pre><code>                            OLS Regression Results                            ==============================================================================Dep. Variable:                    Y18   R-squared:                       0.956Model:                            OLS   Adj. R-squared:                  0.954Method:                 Least Squares   F-statistic:                     495.8Date:                Mon, 13 Apr 2020   Prob (F-statistic):          1.52e-266Time:                        15:30:41   Log-Likelihood:                -733.14No. Observations:                 432   AIC:                             1504.Df Residuals:                     413   BIC:                             1582.Df Model:                          18                                         Covariance Type:            nonrobust                                         ==============================================================================                 coef    std err          t      P&gt;|t|      [0.025      0.975]------------------------------------------------------------------------------Intercept     26.6875      0.065    410.667      0.000      26.560      26.815scale(Y00)     0.6176      0.838      0.737      0.462      -1.030       2.266scale(Y01)     0.5445      3.285      0.166      0.868      -5.914       7.002scale(Y02)     2.6717      3.208      0.833      0.405      -3.635       8.978scale(Y03)    -0.0450      4.271     -0.011      0.992      -8.440       8.350scale(Y04)    -0.0445      4.078     -0.011      0.991      -8.060       7.971scale(Y05)    -1.5686      0.463     -3.388      0.001      -2.479      -0.658scale(Y06)     2.3657      1.095      2.160      0.031       0.213       4.518scale(Y07)    -4.3842      0.590     -7.429      0.000      -5.544      -3.224scale(Y08)    -6.4418      0.869     -7.411      0.000      -8.151      -4.733scale(Y09)   -20.4360      2.400     -8.517      0.000     -25.153     -15.719scale(Y10)    -5.2662      1.781     -2.957      0.003      -8.767      -1.765scale(Y11)    14.8776      1.777      8.370      0.000      11.384      18.372scale(Y12)     3.4542      1.059      3.262      0.001       1.373       5.536scale(Y13)     5.8498      1.715      3.411      0.001       2.479       9.221scale(Y14)    -2.1079      0.742     -2.843      0.005      -3.566      -0.650scale(Y15)     2.3095      0.881      2.622      0.009       0.578       4.041scale(Y16)     2.0766      1.413      1.470      0.142      -0.700       4.854scale(Y17)    11.3015      1.191      9.493      0.000       8.961      13.642==============================================================================Omnibus:                       52.523   Durbin-Watson:                   0.502Prob(Omnibus):                  0.000   Jarque-Bera (JB):              140.165Skew:                          -0.589   Prob(JB):                     3.66e-31Kurtosis:                       5.530   Cond. No.                         372.==============================================================================Warnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = len(Y_pred)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = Y_pred.iloc[idx_train]</span><br><span class="line">dfX_test = Y_pred.iloc[idx_test]</span><br></pre></td></tr></table></figure><blockquote><h2 id="Y18-모델-KFold-검증"><a href="#Y18-모델-KFold-검증" class="headerlink" title="Y18 모델 KFold 검증"></a>Y18 모델 KFold 검증</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(kfold.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model20 = sm.OLS.from_formula(<span class="string">"Y18 ~ 1 +"</span> + <span class="string">'+'</span>.join(b), data=dfX_train)</span><br><span class="line">    result20 = model20.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result20.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y18 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y18 - df_test.Y18.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result20.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result20.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y18 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y18 - dfX_test.Y18.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br><span class="line">print(mean_squared_error(dfX_test.Y18, pred))</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.95404730, 검증 R2 = 0.95265858학습 R2 = 0.95404730, 검증 R2 = 0.93511920학습 R2 = 0.95404730, 검증 R2 = 0.96495716학습 R2 = 0.95404730, 검증 R2 = 0.96417472학습 R2 = 0.95404730, 검증 R2 = 0.942630160.95049006387971711.8285570780772598</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y18'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_92_0.png" class><blockquote><h2 id="accuracy-score와-mse가-좋게-나왔으나-이를-활용해-구한-전체-데이터로-예측모델을-만들-경우-성능이-좋지-못함"><a href="#accuracy-score와-mse가-좋게-나왔으나-이를-활용해-구한-전체-데이터로-예측모델을-만들-경우-성능이-좋지-못함" class="headerlink" title="accuracy_score와 mse가 좋게 나왔으나, 이를 활용해 구한 전체 데이터로 예측모델을 만들 경우 성능이 좋지 못함"></a>accuracy_score와 mse가 좋게 나왔으나, 이를 활용해 구한 전체 데이터로 예측모델을 만들 경우 성능이 좋지 못함</h2></blockquote><blockquote><h2 id="다른-방법이-필요-Lasso-Ridge-EN"><a href="#다른-방법이-필요-Lasso-Ridge-EN" class="headerlink" title="다른 방법이 필요(Lasso, Ridge, EN)"></a>다른 방법이 필요(Lasso, Ridge, EN)</h2></blockquote><ul><li>Ridge, Lasso, EN 정규화를 모두 사용했을 때 Lasso가 가장 좋은 성능을 가짐</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">X = Y_pred.drop(columns=[<span class="string">'Y18'</span>])</span><br><span class="line">y = Y_pred[<span class="string">'Y18'</span>]</span><br><span class="line"></span><br><span class="line">alphas = np.logspace(<span class="number">-4</span>, <span class="number">0</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">train_scores = []</span><br><span class="line">test_scores = []   </span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    model = Lasso(alpha=alpha)</span><br><span class="line">    train_score = -mean_squared_error(y, model.fit(X, y).predict(X))</span><br><span class="line">    test_score = np.mean(cross_val_score(model, X, y, scoring=<span class="string">"neg_mean_squared_error"</span>, cv=<span class="number">5</span>))</span><br><span class="line">    train_scores.append(train_score)</span><br><span class="line">    test_scores.append(test_score)</span><br><span class="line"></span><br><span class="line">optimal_alpha = alphas[np.argmax(test_scores)]</span><br><span class="line">optimal_score = np.max(test_scores)</span><br><span class="line">print(optimal_alpha)</span><br><span class="line"></span><br><span class="line">plt.plot(alphas, test_scores, <span class="string">"-"</span>, label=<span class="string">"검증 성능"</span>)</span><br><span class="line">plt.plot(alphas, train_scores, <span class="string">"--"</span>, label=<span class="string">"학습 성능"</span>)</span><br><span class="line">plt.axhline(optimal_score, linestyle=<span class="string">':'</span>)</span><br><span class="line">plt.axvline(optimal_alpha, linestyle=<span class="string">':'</span>)</span><br><span class="line">plt.scatter(optimal_alpha, optimal_score)</span><br><span class="line">plt.title(<span class="string">"최적 정규화"</span>)</span><br><span class="line">plt.ylabel(<span class="string">'성능'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'정규화 가중치'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/lasso.png" class><blockquote><h2 id="검증"><a href="#검증" class="headerlink" title="검증"></a>검증</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso, Ridge</span><br><span class="line"></span><br><span class="line">X = dfX_train.drop(columns=[<span class="string">'Y18'</span>])</span><br><span class="line">y = dfX_train[<span class="string">'Y18'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> train_idx, test_idx <span class="keyword">in</span> kfold.split(X):</span><br><span class="line">    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]</span><br><span class="line">    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]</span><br><span class="line">    model18 = Lasso(<span class="number">0.172</span>)</span><br><span class="line">    model18.fit(X_train, y_train)</span><br><span class="line">    pred = model18.predict(X_test)</span><br><span class="line">    rss = ((y_test - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((y_test - y_test.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(model18.score(X_test, y_test), rsquared))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pred = model18.predict(dfX_test.drop(columns=[<span class="string">'Y18'</span>]))</span><br><span class="line">rss = ((dfX_test.Y18 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y18 - dfX_test.Y18.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br><span class="line">print(mean_squared_error(dfX_test.Y18, pred))</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.92285981, 검증 R2 = 0.92285981학습 R2 = 0.89027532, 검증 R2 = 0.89027532학습 R2 = 0.94315430, 검증 R2 = 0.94315430학습 R2 = 0.93493313, 검증 R2 = 0.93493313학습 R2 = 0.90241774, 검증 R2 = 0.902417740.91272931866311043.2231797205211716</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y18'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_99_0.png" class><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model18.fit(Y_pred.drop(columns=[<span class="string">'Y18'</span>]), Y_pred[<span class="string">'Y18'</span>])</span><br></pre></td></tr></table></figure><pre><code>Lasso(alpha=0.172, copy_X=True, fit_intercept=True, max_iter=1000,      normalize=False, positive=False, precompute=False, random_state=None,      selection=&apos;cyclic&apos;, tol=0.0001, warm_start=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = sensor_name</span><br><span class="line">c.append(<span class="string">'hour'</span>)</span><br><span class="line">c</span><br></pre></td></tr></table></figure><pre><code>[&apos;Y00&apos;, &apos;Y01&apos;, &apos;Y02&apos;, &apos;Y03&apos;, &apos;Y04&apos;, &apos;Y05&apos;, &apos;Y06&apos;, &apos;Y07&apos;, &apos;Y08&apos;, &apos;Y09&apos;, &apos;Y10&apos;, &apos;Y11&apos;, &apos;Y12&apos;, &apos;Y13&apos;, &apos;Y14&apos;, &apos;Y15&apos;, &apos;Y16&apos;, &apos;Y17&apos;, &apos;hour&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result20.predict(df1[c]).round(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>0       11.301       13.292       10.723       12.324       11.70        ...  4315    22.284316    21.574317    19.644318    19.374319    18.30Length: 4320, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_30s[<span class="string">'Y18'</span>] = result20.predict(df1[c]).round(<span class="number">2</span>)</span><br><span class="line">X_30s</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>1009.8</td>      <td>...</td>      <td>10.7</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.2</td>      <td>62.6</td>      <td>0</td>      <td>0</td>      <td>11.30</td>    </tr>    <tr>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>1009.9</td>      <td>...</td>      <td>10.3</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.5</td>      <td>0</td>      <td>0</td>      <td>13.29</td>    </tr>    <tr>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>1010.1</td>      <td>...</td>      <td>9.7</td>      <td>1010.0</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.9</td>      <td>0</td>      <td>0</td>      <td>10.72</td>    </tr>    <tr>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.5</td>      <td>64.5</td>      <td>0</td>      <td>0</td>      <td>12.32</td>    </tr>    <tr>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>78.0</td>      <td>65.0</td>      <td>0</td>      <td>0</td>      <td>11.70</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4315</td>      <td>19.5</td>      <td>987.8</td>      <td>1.7</td>      <td>0.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.0</td>      <td>21.3</td>      <td>1007.8</td>      <td>1007.5</td>      <td>...</td>      <td>19.4</td>      <td>1008.2</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.3</td>      <td>74.3</td>      <td>0</td>      <td>23</td>      <td>22.28</td>    </tr>    <tr>      <td>4316</td>      <td>19.3</td>      <td>987.7</td>      <td>2.1</td>      <td>0.9</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>21.3</td>      <td>1008.0</td>      <td>1007.4</td>      <td>...</td>      <td>18.5</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.4</td>      <td>74.8</td>      <td>0</td>      <td>23</td>      <td>21.57</td>    </tr>    <tr>      <td>4317</td>      <td>19.5</td>      <td>987.8</td>      <td>0.9</td>      <td>1.3</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.2</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>19.1</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.4</td>      <td>0</td>      <td>23</td>      <td>19.64</td>    </tr>    <tr>      <td>4318</td>      <td>20.0</td>      <td>987.8</td>      <td>1.4</td>      <td>0.5</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.1</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>19.0</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.8</td>      <td>0</td>      <td>23</td>      <td>19.37</td>    </tr>    <tr>      <td>4319</td>      <td>20.1</td>      <td>987.8</td>      <td>1.2</td>      <td>1.2</td>      <td>0</td>      <td>1007.8</td>      <td>988.2</td>      <td>20.9</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>18.5</td>      <td>1008.3</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>83.5</td>      <td>76.9</td>      <td>0</td>      <td>23</td>      <td>18.30</td>    </tr>  </tbody></table><p>4320 rows × 39 columns</p></div><blockquote><h2 id="이전-30일의-Y18-예측"><a href="#이전-30일의-Y18-예측" class="headerlink" title="이전 30일의 Y18 예측"></a>이전 30일의 Y18 예측</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_30s[<span class="string">'Y18'</span>] = model18.predict(df1[c]).round(<span class="number">2</span>)</span><br><span class="line">X_30s</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>1009.8</td>      <td>...</td>      <td>10.7</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.2</td>      <td>62.6</td>      <td>0</td>      <td>0</td>      <td>10.42</td>    </tr>    <tr>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>1009.9</td>      <td>...</td>      <td>10.3</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.5</td>      <td>0</td>      <td>0</td>      <td>10.41</td>    </tr>    <tr>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>1010.1</td>      <td>...</td>      <td>9.7</td>      <td>1010.0</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.9</td>      <td>0</td>      <td>0</td>      <td>9.81</td>    </tr>    <tr>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.5</td>      <td>64.5</td>      <td>0</td>      <td>0</td>      <td>9.94</td>    </tr>    <tr>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>78.0</td>      <td>65.0</td>      <td>0</td>      <td>0</td>      <td>9.56</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4315</td>      <td>19.5</td>      <td>987.8</td>      <td>1.7</td>      <td>0.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.0</td>      <td>21.3</td>      <td>1007.8</td>      <td>1007.5</td>      <td>...</td>      <td>19.4</td>      <td>1008.2</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.3</td>      <td>74.3</td>      <td>0</td>      <td>23</td>      <td>21.12</td>    </tr>    <tr>      <td>4316</td>      <td>19.3</td>      <td>987.7</td>      <td>2.1</td>      <td>0.9</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>21.3</td>      <td>1008.0</td>      <td>1007.4</td>      <td>...</td>      <td>18.5</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.4</td>      <td>74.8</td>      <td>0</td>      <td>23</td>      <td>20.91</td>    </tr>    <tr>      <td>4317</td>      <td>19.5</td>      <td>987.8</td>      <td>0.9</td>      <td>1.3</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.2</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>19.1</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.4</td>      <td>0</td>      <td>23</td>      <td>20.65</td>    </tr>    <tr>      <td>4318</td>      <td>20.0</td>      <td>987.8</td>      <td>1.4</td>      <td>0.5</td>      <td>0</td>      <td>1007.8</td>      <td>988.3</td>      <td>21.1</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>19.0</td>      <td>1008.4</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>82.8</td>      <td>75.8</td>      <td>0</td>      <td>23</td>      <td>20.66</td>    </tr>    <tr>      <td>4319</td>      <td>20.1</td>      <td>987.8</td>      <td>1.2</td>      <td>1.2</td>      <td>0</td>      <td>1007.8</td>      <td>988.2</td>      <td>20.9</td>      <td>1008.1</td>      <td>1007.5</td>      <td>...</td>      <td>18.5</td>      <td>1008.3</td>      <td>16.68</td>      <td>3</td>      <td>0</td>      <td>83.5</td>      <td>76.9</td>      <td>0</td>      <td>23</td>      <td>20.40</td>    </tr>  </tbody></table><p>4320 rows × 39 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_3s[<span class="string">'Y18'</span>] = df2[<span class="string">'Y18'</span>]</span><br><span class="line">X_3s</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>4320</td>      <td>19.3</td>      <td>987.7</td>      <td>0.9</td>      <td>2.2</td>      <td>0</td>      <td>1007.7</td>      <td>988.0</td>      <td>20.8</td>      <td>1007.8</td>      <td>1007.4</td>      <td>...</td>      <td>18.7</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.0</td>      <td>77.6</td>      <td>0</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4321</td>      <td>19.0</td>      <td>987.6</td>      <td>1.9</td>      <td>2.2</td>      <td>0</td>      <td>1007.7</td>      <td>988.0</td>      <td>20.6</td>      <td>1007.8</td>      <td>1007.4</td>      <td>...</td>      <td>19.0</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.4</td>      <td>79.2</td>      <td>0</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4322</td>      <td>19.1</td>      <td>987.6</td>      <td>2.0</td>      <td>1.4</td>      <td>0</td>      <td>1007.8</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.9</td>      <td>1007.4</td>      <td>...</td>      <td>19.2</td>      <td>1008.3</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>79.9</td>      <td>0</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4323</td>      <td>19.2</td>      <td>987.7</td>      <td>1.8</td>      <td>1.5</td>      <td>0</td>      <td>1007.9</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.9</td>      <td>1007.5</td>      <td>...</td>      <td>19.3</td>      <td>1008.4</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>80.7</td>      <td>0</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>4324</td>      <td>19.2</td>      <td>987.8</td>      <td>1.4</td>      <td>1.4</td>      <td>0</td>      <td>1007.9</td>      <td>988.1</td>      <td>20.5</td>      <td>1007.8</td>      <td>1007.6</td>      <td>...</td>      <td>19.5</td>      <td>1008.4</td>      <td>0.00</td>      <td>3</td>      <td>0</td>      <td>84.9</td>      <td>80.9</td>      <td>0</td>      <td>0</td>      <td>20.5</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4747</td>      <td>19.9</td>      <td>987.6</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.7</td>      <td>21.7</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>19.1</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>82.3</td>      <td>58.6</td>      <td>1</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4748</td>      <td>19.9</td>      <td>987.6</td>      <td>0.5</td>      <td>0.7</td>      <td>0</td>      <td>1006.8</td>      <td>987.7</td>      <td>21.6</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>82.5</td>      <td>59.1</td>      <td>1</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4749</td>      <td>19.7</td>      <td>987.7</td>      <td>0.9</td>      <td>0.6</td>      <td>0</td>      <td>1006.9</td>      <td>987.6</td>      <td>21.4</td>      <td>1007.4</td>      <td>1007.5</td>      <td>...</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>83.0</td>      <td>58.9</td>      <td>1</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4750</td>      <td>19.4</td>      <td>987.7</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.8</td>      <td>21.3</td>      <td>1007.6</td>      <td>1007.5</td>      <td>...</td>      <td>19.3</td>      <td>1007.6</td>      <td>22.16</td>      <td>3</td>      <td>0</td>      <td>83.2</td>      <td>59.8</td>      <td>1</td>      <td>23</td>      <td>21.5</td>    </tr>    <tr>      <td>4751</td>      <td>19.1</td>      <td>987.6</td>      <td>1.0</td>      <td>0.3</td>      <td>0</td>      <td>1006.8</td>      <td>987.8</td>      <td>21.2</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>19.5</td>      <td>1007.7</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>84.0</td>      <td>59.5</td>      <td>1</td>      <td>23</td>      <td>21.0</td>    </tr>  </tbody></table><p>432 rows × 39 columns</p></div><blockquote><h2 id="전체-X데이터로-Y18-예측모델-만들기"><a href="#전체-X데이터로-Y18-예측모델-만들기" class="headerlink" title="전체 X데이터로 Y18 예측모델 만들기"></a>전체 X데이터로 Y18 예측모델 만들기</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_X = pd.concat([X_30s, X_3s])</span><br><span class="line">all_X</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>9.7</td>      <td>988.8</td>      <td>1.2</td>      <td>0.6</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.2</td>      <td>1009.9</td>      <td>1009.8</td>      <td>...</td>      <td>10.7</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.2</td>      <td>62.6</td>      <td>0</td>      <td>0</td>      <td>10.42</td>    </tr>    <tr>      <td>1</td>      <td>9.3</td>      <td>988.9</td>      <td>1.7</td>      <td>1.9</td>      <td>0</td>      <td>1009.3</td>      <td>989.6</td>      <td>12.1</td>      <td>1010.0</td>      <td>1009.9</td>      <td>...</td>      <td>10.3</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.5</td>      <td>0</td>      <td>0</td>      <td>10.41</td>    </tr>    <tr>      <td>2</td>      <td>9.4</td>      <td>989.0</td>      <td>1.1</td>      <td>2.3</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.1</td>      <td>1010.1</td>      <td>1010.1</td>      <td>...</td>      <td>9.7</td>      <td>1010.0</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.3</td>      <td>63.9</td>      <td>0</td>      <td>0</td>      <td>9.81</td>    </tr>    <tr>      <td>3</td>      <td>9.4</td>      <td>988.9</td>      <td>1.5</td>      <td>0.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.6</td>      <td>12.0</td>      <td>1010.0</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>77.5</td>      <td>64.5</td>      <td>0</td>      <td>0</td>      <td>9.94</td>    </tr>    <tr>      <td>4</td>      <td>9.2</td>      <td>988.9</td>      <td>0.8</td>      <td>1.7</td>      <td>0</td>      <td>1009.2</td>      <td>989.7</td>      <td>12.0</td>      <td>1010.1</td>      <td>1010.0</td>      <td>...</td>      <td>9.4</td>      <td>1010.1</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>78.0</td>      <td>65.0</td>      <td>0</td>      <td>0</td>      <td>9.56</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>4747</td>      <td>19.9</td>      <td>987.6</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.7</td>      <td>21.7</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>19.1</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>82.3</td>      <td>58.6</td>      <td>1</td>      <td>23</td>      <td>21.50</td>    </tr>    <tr>      <td>4748</td>      <td>19.9</td>      <td>987.6</td>      <td>0.5</td>      <td>0.7</td>      <td>0</td>      <td>1006.8</td>      <td>987.7</td>      <td>21.6</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>82.5</td>      <td>59.1</td>      <td>1</td>      <td>23</td>      <td>21.50</td>    </tr>    <tr>      <td>4749</td>      <td>19.7</td>      <td>987.7</td>      <td>0.9</td>      <td>0.6</td>      <td>0</td>      <td>1006.9</td>      <td>987.6</td>      <td>21.4</td>      <td>1007.4</td>      <td>1007.5</td>      <td>...</td>      <td>19.2</td>      <td>1007.5</td>      <td>22.16</td>      <td>2</td>      <td>0</td>      <td>83.0</td>      <td>58.9</td>      <td>1</td>      <td>23</td>      <td>21.50</td>    </tr>    <tr>      <td>4750</td>      <td>19.4</td>      <td>987.7</td>      <td>0.9</td>      <td>0.8</td>      <td>0</td>      <td>1006.9</td>      <td>987.8</td>      <td>21.3</td>      <td>1007.6</td>      <td>1007.5</td>      <td>...</td>      <td>19.3</td>      <td>1007.6</td>      <td>22.16</td>      <td>3</td>      <td>0</td>      <td>83.2</td>      <td>59.8</td>      <td>1</td>      <td>23</td>      <td>21.50</td>    </tr>    <tr>      <td>4751</td>      <td>19.1</td>      <td>987.6</td>      <td>1.0</td>      <td>0.3</td>      <td>0</td>      <td>1006.8</td>      <td>987.8</td>      <td>21.2</td>      <td>1007.5</td>      <td>1007.4</td>      <td>...</td>      <td>19.5</td>      <td>1007.7</td>      <td>22.16</td>      <td>1</td>      <td>0</td>      <td>84.0</td>      <td>59.5</td>      <td>1</td>      <td>23</td>      <td>21.00</td>    </tr>  </tbody></table><p>4752 rows × 39 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">N = len(all_X)</span><br><span class="line">ratio = <span class="number">0.7</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">idx_train = np.random.choice(np.arange(N), np.int(ratio * N))</span><br><span class="line">idx_test = list(set(np.arange(N)).difference(idx_train))</span><br><span class="line"></span><br><span class="line">dfX_train = all_X.iloc[idx_train]</span><br><span class="line">dfX_test = all_X.iloc[idx_test]</span><br></pre></td></tr></table></figure><blockquote><h2 id="Y18-OLS-report"><a href="#Y18-OLS-report" class="headerlink" title="Y18 OLS report"></a>Y18 OLS report</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model18 = sm.OLS.from_formula(<span class="string">"Y18 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">result18 = model18.fit()</span><br><span class="line">print(result18.summary())</span><br></pre></td></tr></table></figure><pre><code>                            OLS Regression Results                            ==============================================================================Dep. Variable:                    Y18   R-squared:                       0.967Model:                            OLS   Adj. R-squared:                  0.966Method:                 Least Squares   F-statistic:                     1472.Date:                Sat, 18 Apr 2020   Prob (F-statistic):               0.00Time:                        02:27:53   Log-Likelihood:                -5817.7No. Observations:                3326   AIC:                         1.177e+04Df Residuals:                    3260   BIC:                         1.217e+04Df Model:                          65                                         Covariance Type:            nonrobust                                         =================================================================================                    coef    std err          t      P&gt;|t|      [0.025      0.975]---------------------------------------------------------------------------------Intercept        21.9494      0.179    122.879      0.000      21.599      22.300C(X04)[T.1]       0.5592      0.250      2.237      0.025       0.069       1.049C(X10)[T.1]       0.1419      0.281      0.506      0.613      -0.408       0.692C(X21)[T.1]       0.8674      0.278      3.124      0.002       0.323       1.412C(X36)[T.1]      -2.5134      0.264     -9.514      0.000      -3.031      -1.995C(X39)[T.1]      -0.2722      0.160     -1.699      0.089      -0.586       0.042C(X13)[T.1]       0.0005      0.081      0.006      0.996      -0.158       0.159C(X13)[T.2]      -0.0890      0.068     -1.306      0.192      -0.223       0.045C(X13)[T.3]       0.1095      0.090      1.214      0.225      -0.067       0.286C(X15)[T.1]      -0.3793      0.087     -4.366      0.000      -0.550      -0.209C(X15)[T.2]      -0.3496      0.081     -4.331      0.000      -0.508      -0.191C(X15)[T.3]      -0.1822      0.090     -2.031      0.042      -0.358      -0.006C(X17)[T.1]       0.1647      0.085      1.945      0.052      -0.001       0.331C(X17)[T.2]       0.1234      0.082      1.499      0.134      -0.038       0.285C(X17)[T.3]       0.0885      0.085      1.046      0.296      -0.077       0.255C(X25)[T.1]      -0.1689      0.108     -1.569      0.117      -0.380       0.042C(X25)[T.2]       0.0230      0.089      0.258      0.796      -0.152       0.198C(X25)[T.3]       0.1889      0.079      2.404      0.016       0.035       0.343C(X35)[T.1]       0.2490      0.098      2.532      0.011       0.056       0.442C(X35)[T.2]      -0.1920      0.085     -2.259      0.024      -0.359      -0.025C(X35)[T.3]       0.0621      0.087      0.714      0.475      -0.108       0.233C(hour)[T.1]     -0.0386      0.161     -0.240      0.810      -0.354       0.276C(hour)[T.2]      0.1490      0.167      0.892      0.373      -0.179       0.477C(hour)[T.3]      0.0931      0.167      0.559      0.576      -0.233       0.420C(hour)[T.4]      0.1347      0.170      0.791      0.429      -0.199       0.469C(hour)[T.5]      0.4355      0.172      2.530      0.011       0.098       0.773C(hour)[T.6]      1.1144      0.173      6.443      0.000       0.775       1.454C(hour)[T.7]      2.0508      0.177     11.578      0.000       1.703       2.398C(hour)[T.8]      2.6423      0.180     14.706      0.000       2.290       2.995C(hour)[T.9]      4.6882      0.190     24.630      0.000       4.315       5.061C(hour)[T.10]     5.9639      0.200     29.816      0.000       5.572       6.356C(hour)[T.11]     7.2187      0.213     33.969      0.000       6.802       7.635C(hour)[T.12]     8.1562      0.223     36.513      0.000       7.718       8.594C(hour)[T.13]     7.6495      0.235     32.535      0.000       7.189       8.111C(hour)[T.14]     4.8837      0.238     20.509      0.000       4.417       5.351C(hour)[T.15]     1.9181      0.251      7.651      0.000       1.427       2.410C(hour)[T.16]     0.8868      0.255      3.475      0.001       0.386       1.387C(hour)[T.17]     1.9417      0.260      7.473      0.000       1.432       2.451C(hour)[T.18]     0.8412      0.268      3.144      0.002       0.317       1.366C(hour)[T.19]     0.7748      0.270      2.869      0.004       0.245       1.304C(hour)[T.20]     0.6640      0.271      2.453      0.014       0.133       1.195C(hour)[T.21]     0.6215      0.277      2.241      0.025       0.078       1.165C(hour)[T.22]     0.4593      0.274      1.674      0.094      -0.079       0.997C(hour)[T.23]     0.5301      0.283      1.876      0.061      -0.024       1.084scale(X00)        0.8557      0.184      4.663      0.000       0.496       1.216scale(X07)        2.9758      0.237     12.559      0.000       2.511       3.440scale(X28)       -1.0887      0.219     -4.964      0.000      -1.519      -0.659scale(X31)        2.3334      0.215     10.876      0.000       1.913       2.754scale(X32)        0.3004      0.212      1.419      0.156      -0.115       0.715scale(X01)        1.4245      0.554      2.570      0.010       0.338       2.511scale(X06)       -5.1961      0.586     -8.865      0.000      -6.345      -4.047scale(X22)        0.9602      0.597      1.609      0.108      -0.210       2.130scale(X27)        1.9049      0.440      4.329      0.000       1.042       2.768scale(X29)        0.8797      0.792      1.110      0.267      -0.674       2.433scale(X12)       -0.0224      0.154     -0.145      0.884      -0.325       0.280scale(X20)       -0.1559      0.124     -1.257      0.209      -0.399       0.087scale(X30)       -0.3912      0.138     -2.831      0.005      -0.662      -0.120scale(X37)        0.2628      0.125      2.097      0.036       0.017       0.509scale(X38)       -0.6327      0.115     -5.501      0.000      -0.858      -0.407scale(X11)       -1.1408      0.304     -3.750      0.000      -1.737      -0.544scale(X34)        0.8955      0.312      2.870      0.004       0.284       1.507scale(X02)        0.1300      0.033      3.974      0.000       0.066       0.194scale(X03)       -0.1836      0.033     -5.512      0.000      -0.249      -0.118scale(X18)        0.0055      0.040      0.136      0.892      -0.073       0.084scale(X24)       -0.1218      0.045     -2.734      0.006      -0.209      -0.034scale(X26)       -0.1876      0.043     -4.407      0.000      -0.271      -0.104==============================================================================Omnibus:                      188.844   Durbin-Watson:                   2.019Prob(Omnibus):                  0.000   Jarque-Bera (JB):              516.990Skew:                          -0.293   Prob(JB):                    5.46e-113Kurtosis:                       4.841   Cond. No.                         128.==============================================================================Warnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">scores = np.zeros(<span class="number">5</span>)</span><br><span class="line">cv = KFold(<span class="number">5</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">13</span>)</span><br><span class="line"><span class="keyword">for</span> i, (idx_train, idx_test) <span class="keyword">in</span> enumerate(cv.split(dfX_train)):</span><br><span class="line">    df_train = dfX_train.iloc[idx_train]</span><br><span class="line">    df_test = dfX_train.iloc[idx_test]</span><br><span class="line">    </span><br><span class="line">    model18 = sm.OLS.from_formula(<span class="string">"Y18 ~ 1 +"</span> + a, data=dfX_train)</span><br><span class="line">    result18 = model18.fit()</span><br><span class="line">    </span><br><span class="line">    pred = result18.predict(df_test)</span><br><span class="line">    rss = ((df_test.Y18 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((df_test.Y18 - df_test.Y18.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    scores[i] = rsquared</span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(result18.rsquared, rsquared))</span><br><span class="line"></span><br><span class="line">pred = result18.predict(dfX_test)</span><br><span class="line">rss = ((dfX_test.Y18 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y18 - dfX_test.Y18.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br><span class="line">print(mean_squared_error(dfX_test.Y18, pred))</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.96704763, 검증 R2 = 0.96344232학습 R2 = 0.96704763, 검증 R2 = 0.96605570학습 R2 = 0.96704763, 검증 R2 = 0.96840262학습 R2 = 0.96704763, 검증 R2 = 0.96691297학습 R2 = 0.96704763, 검증 R2 = 0.969681240.96437086714814411.9913783582763236</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y18'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_113_0.png" class><blockquote><h2 id="테스트-결과는"><a href="#테스트-결과는" class="headerlink" title="테스트 결과는?"></a>테스트 결과는?</h2></blockquote><img src="/2020/04/18/final_blog/formula.png" class><blockquote><h2 id="Lasso는-어떨까"><a href="#Lasso는-어떨까" class="headerlink" title="Lasso는 어떨까?"></a>Lasso는 어떨까?</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">X = all_X.drop(columns=[<span class="string">'Y18'</span>])</span><br><span class="line">y = all_X[<span class="string">'Y18'</span>]</span><br><span class="line"></span><br><span class="line">alphas = np.logspace(<span class="number">-4</span>, <span class="number">0</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">train_scores = []</span><br><span class="line">test_scores = []</span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> alphas:</span><br><span class="line">    model = Lasso(alpha=alpha)</span><br><span class="line">    train_score = -mean_squared_error(y, model.fit(X, y).predict(X))</span><br><span class="line">    test_score = np.mean(cross_val_score(model, X, y, scoring=<span class="string">"neg_mean_squared_error"</span>, cv=<span class="number">5</span>))</span><br><span class="line">    train_scores.append(train_score)</span><br><span class="line">    test_scores.append(test_score)</span><br><span class="line"></span><br><span class="line">optimal_alpha = alphas[np.argmax(test_scores)]</span><br><span class="line">optimal_score = np.max(test_scores)</span><br><span class="line">print(optimal_alpha)</span><br><span class="line"></span><br><span class="line">plt.plot(alphas, test_scores, <span class="string">"-"</span>, label=<span class="string">"검증 성능"</span>)</span><br><span class="line">plt.plot(alphas, train_scores, <span class="string">"--"</span>, label=<span class="string">"학습 성능"</span>)</span><br><span class="line">plt.axhline(optimal_score, linestyle=<span class="string">':'</span>)</span><br><span class="line">plt.axvline(optimal_alpha, linestyle=<span class="string">':'</span>)</span><br><span class="line">plt.scatter(optimal_alpha, optimal_score)</span><br><span class="line">plt.title(<span class="string">"최적 정규화"</span>)</span><br><span class="line">plt.ylabel(<span class="string">'성능'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'정규화 가중치'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>0.01289890261253308</code></pre>{% asset_img final_blog_116_1.png %}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">X = dfX_train.drop(columns=[<span class="string">'Y18'</span>])</span><br><span class="line">y = dfX_train[<span class="string">'Y18'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> train_idx, test_idx <span class="keyword">in</span> kfold.split(X):</span><br><span class="line">    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]</span><br><span class="line">    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]</span><br><span class="line">    model18 = Lasso(<span class="number">0.012</span>)</span><br><span class="line">    model18.fit(X_train, y_train)</span><br><span class="line">    pred = model18.predict(X_test)</span><br><span class="line">    rss = ((y_test - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">    tss = ((y_test - y_test.mean())** <span class="number">2</span>).sum()</span><br><span class="line">    rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"학습 R2 = &#123;:.8f&#125;, 검증 R2 = &#123;:.8f&#125;"</span>.format(model18.score(X_test, y_test), rsquared))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pred = model18.predict(dfX_test.drop(columns=[<span class="string">'Y18'</span>]))</span><br><span class="line">rss = ((dfX_test.Y18 - pred) ** <span class="number">2</span>).sum()</span><br><span class="line">tss = ((dfX_test.Y18 - dfX_test.Y18.mean())** <span class="number">2</span>).sum()</span><br><span class="line">rsquared = <span class="number">1</span> - rss / tss</span><br><span class="line">print(rsquared)</span><br><span class="line">print(mean_squared_error(dfX_test.Y18, pred))</span><br></pre></td></tr></table></figure><pre><code>학습 R2 = 0.92249209, 검증 R2 = 0.92249209학습 R2 = 0.91956967, 검증 R2 = 0.91956967학습 R2 = 0.92019706, 검증 R2 = 0.92019706학습 R2 = 0.92395915, 검증 R2 = 0.92395915학습 R2 = 0.92177100, 검증 R2 = 0.921771000.92465315529683364.2112749847201885</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.scatter(dfX_test[<span class="string">'Y18'</span>], pred)</span><br><span class="line">plt.plot([<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], [<span class="number">0</span>, dfX_test[<span class="string">'Y18'</span>].max()], <span class="string">"r"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">"y_test"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y_predict"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2020/04/18/final_blog/final_blog_118_0.png" class><blockquote><h2 id="테스트-결과는-1"><a href="#테스트-결과는-1" class="headerlink" title="테스트 결과는?"></a>테스트 결과는?</h2></blockquote><ul><li>OLS 보다 더 안좋게 나왔다.</li></ul><img src="/2020/04/18/final_blog/lasso_.png" class><blockquote><h2 id="시도해-본-모델들"><a href="#시도해-본-모델들" class="headerlink" title="시도해 본 모델들"></a>시도해 본 모델들</h2></blockquote><ul><li><strong>각 측정영역 별 평균 모델(잘못된 방법)</strong><ul><li>MSE : 4.60</li></ul></li><li><strong>OLS 모델</strong><ul><li>MSE : 5.46</li></ul></li><li><strong>Lasso 모델</strong><ul><li>MSE : 6.75</li></ul></li><li><strong>OLS + Lasso + OLS 모델</strong><ul><li>MSE : 3.99</li></ul></li><li><strong>OLS + Lasso + Lasso 모델</strong><ul><li>MSE = 5.30</li></ul></li></ul><blockquote><h2 id="성능의-향상을-위해-머신러닝-기법-적용"><a href="#성능의-향상을-위해-머신러닝-기법-적용" class="headerlink" title="+ 성능의 향상을 위해! 머신러닝 기법 적용"></a>+ 성능의 향상을 위해! 머신러닝 기법 적용</h2></blockquote><ul><li>LGBM, RandomForestRegressor<ul><li>RandomForestRegressor 성능이 제일 좋았음</li></ul></li></ul><blockquote><h2 id="RandomForestRegressor"><a href="#RandomForestRegressor" class="headerlink" title="RandomForestRegressor"></a>RandomForestRegressor</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = all_X.drop([<span class="string">'Y18'</span>], axis=<span class="number">1</span>)</span><br><span class="line">y = all_X[<span class="string">'Y18'</span>]</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rf_reg = RandomForestRegressor(random_state=<span class="number">13</span>, n_jobs=<span class="number">-1</span>, bootstrap=<span class="literal">False</span>, criterion=<span class="string">'mse'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def MSE(y_true,y_pred):</span></span><br><span class="line"><span class="comment">#     mse = mean_squared_error(y_true, y_pred)</span></span><br><span class="line"><span class="comment">#     print('MSE: %2.3f' % mse)</span></span><br><span class="line"><span class="comment">#     return mse</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># params = &#123;</span></span><br><span class="line"><span class="comment">#     'max_depth' : [6, 8, 10, 12, 16, 20, 24],</span></span><br><span class="line"><span class="comment">#     'n_estimators': [50, 100, 150, 200],</span></span><br><span class="line"><span class="comment">#     'min_samples_leaf': [8, 12],</span></span><br><span class="line"><span class="comment">#     'min_samples_split': [8, 12]</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grid_cv = GridSearchCV(rf_reg, param_grid=params, cv=5, scoring=make_scorer(MSE, greater_is_better=False), return_train_score=True, n_jobs=-1)</span></span><br><span class="line"><span class="comment"># grid_cv.fit(X_train, y_train)</span></span><br></pre></td></tr></table></figure><pre><code>GridSearchCV(cv=5, error_score=nan,             estimator=RandomForestRegressor(bootstrap=True, ccp_alpha=0.0,                                             criterion=&apos;mse&apos;, max_depth=None,                                             max_features=&apos;auto&apos;,                                             max_leaf_nodes=None,                                             max_samples=None,                                             min_impurity_decrease=0.0,                                             min_impurity_split=None,                                             min_samples_leaf=1,                                             min_samples_split=2,                                             min_weight_fraction_leaf=0.0,                                             n_estimators=100, n_jobs=-1,                                             oob_score=False, random_state=13,                                             verbose=0, warm_start=False),             iid=&apos;deprecated&apos;, n_jobs=-1,             param_grid={&apos;max_depth&apos;: [6, 8, 10, 12, 16, 20, 24],                         &apos;min_samples_leaf&apos;: [8, 12],                         &apos;min_samples_split&apos;: [8, 12],                         &apos;n_estimators&apos;: [50, 100, 150, 200]},             pre_dispatch=&apos;2*n_jobs&apos;, refit=True, return_train_score=True,             scoring=make_scorer(MSE, greater_is_better=False), verbose=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'max_depth'</span> : [<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">70</span>],</span><br><span class="line">    <span class="string">'max_features'</span> : [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>],</span><br><span class="line">    <span class="string">'n_estimators'</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>],</span><br><span class="line">    <span class="string">'min_samples_leaf'</span>: [<span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">    <span class="string">'min_samples_split'</span>: [<span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grid_cv = GridSearchCV(rf_reg, param_grid=params, cv=<span class="number">5</span>, return_train_score=<span class="literal">True</span>, n_jobs=<span class="number">-1</span>)</span><br><span class="line">grid_cv.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><pre><code>GridSearchCV(cv=5, error_score=nan,             estimator=RandomForestRegressor(bootstrap=False, ccp_alpha=0.0,                                             criterion=&apos;mse&apos;, max_depth=None,                                             max_features=&apos;auto&apos;,                                             max_leaf_nodes=None,                                             max_samples=None,                                             min_impurity_decrease=0.0,                                             min_impurity_split=None,                                             min_samples_leaf=1,                                             min_samples_split=2,                                             min_weight_fraction_leaf=0.0,                                             n_estimators=100, n_jobs=-1,                                             oob_score=False, random_state=13,                                             verbose=0, warm_start=False),             iid=&apos;deprecated&apos;, n_jobs=-1,             param_grid={&apos;max_depth&apos;: [10, 15, 20, 25, 30, 35, 40, 45, 50, 55,                                       60, 70],                         &apos;max_features&apos;: [10, 20, 30, 35, 40, 45, 50, 55],                         &apos;min_samples_leaf&apos;: [8, 12],                         &apos;min_samples_split&apos;: [8, 12],                         &apos;n_estimators&apos;: [50, 100, 150, 200]},             pre_dispatch=&apos;2*n_jobs&apos;, refit=True, return_train_score=True,             scoring=None, verbose=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv_results_df = pd.DataFrame(grid_cv.cv_results_)</span><br><span class="line">cv_results_df.columns</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;mean_fit_time&apos;, &apos;std_fit_time&apos;, &apos;mean_score_time&apos;, &apos;std_score_time&apos;,       &apos;param_max_depth&apos;, &apos;param_max_features&apos;, &apos;param_min_samples_leaf&apos;,       &apos;param_min_samples_split&apos;, &apos;param_n_estimators&apos;, &apos;params&apos;,       &apos;split0_test_score&apos;, &apos;split1_test_score&apos;, &apos;split2_test_score&apos;,       &apos;split3_test_score&apos;, &apos;split4_test_score&apos;, &apos;mean_test_score&apos;,       &apos;std_test_score&apos;, &apos;rank_test_score&apos;, &apos;split0_train_score&apos;,       &apos;split1_train_score&apos;, &apos;split2_train_score&apos;, &apos;split3_train_score&apos;,       &apos;split4_train_score&apos;, &apos;mean_train_score&apos;, &apos;std_train_score&apos;],      dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'rank_test_score'</span>, <span class="string">'mean_test_score'</span>, <span class="string">'param_n_estimators'</span>, <span class="string">'param_max_depth'</span>]</span><br><span class="line">cv_results_df[cols].sort_values(<span class="string">'rank_test_score'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>rank_test_score</th>      <th>mean_test_score</th>      <th>param_n_estimators</th>      <th>param_max_depth</th>    </tr>  </thead>  <tbody>    <tr>      <td>1047</td>      <td>1</td>      <td>0.930728</td>      <td>200</td>      <td>50</td>    </tr>    <tr>      <td>1431</td>      <td>1</td>      <td>0.930728</td>      <td>200</td>      <td>70</td>    </tr>    <tr>      <td>919</td>      <td>1</td>      <td>0.930728</td>      <td>200</td>      <td>45</td>    </tr>    <tr>      <td>1303</td>      <td>1</td>      <td>0.930728</td>      <td>200</td>      <td>60</td>    </tr>    <tr>      <td>915</td>      <td>1</td>      <td>0.930728</td>      <td>200</td>      <td>45</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>730</td>      <td>1532</td>      <td>NaN</td>      <td>150</td>      <td>35</td>    </tr>    <tr>      <td>731</td>      <td>1533</td>      <td>NaN</td>      <td>200</td>      <td>35</td>    </tr>    <tr>      <td>732</td>      <td>1534</td>      <td>NaN</td>      <td>50</td>      <td>35</td>    </tr>    <tr>      <td>1022</td>      <td>1535</td>      <td>NaN</td>      <td>150</td>      <td>45</td>    </tr>    <tr>      <td>1535</td>      <td>1536</td>      <td>NaN</td>      <td>200</td>      <td>70</td>    </tr>  </tbody></table><p>1536 rows × 4 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_cv.best_params_</span><br></pre></td></tr></table></figure><pre><code>{&apos;max_depth&apos;: 25, &apos;max_features&apos;: 20, &apos;min_samples_leaf&apos;: 8, &apos;min_samples_split&apos;: 8, &apos;n_estimators&apos;: 200}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_cv.best_score_</span><br></pre></td></tr></table></figure><pre><code>0.9307276554332164</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rf_reg_best = grid_cv.best_estimator_</span><br><span class="line">rf_reg_best.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">pred = rf_reg_best.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(mean_squared_error(y_test, pred))</span><br></pre></td></tr></table></figure><pre><code>3.5975712904104613</code></pre><blockquote><h2 id="전체-모델-만들어-Test-데이터에-적용"><a href="#전체-모델-만들어-Test-데이터에-적용" class="headerlink" title="전체 모델 만들어 Test 데이터에 적용"></a>전체 모델 만들어 Test 데이터에 적용</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'max_depth'</span> : [<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">24</span>],</span><br><span class="line">    <span class="string">'n_estimators'</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>],</span><br><span class="line">    <span class="string">'min_samples_leaf'</span>: [<span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">    <span class="string">'min_samples_split'</span>: [<span class="number">8</span>, <span class="number">12</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grid_cv = GridSearchCV(rf_reg, param_grid=params, cv=<span class="number">5</span>, return_train_score=<span class="literal">True</span>, n_jobs=<span class="number">-1</span>)</span><br><span class="line">grid_cv.fit(X, y)</span><br></pre></td></tr></table></figure><pre><code>GridSearchCV(cv=5, error_score=nan,             estimator=RandomForestRegressor(bootstrap=True, ccp_alpha=0.0,                                             criterion=&apos;mse&apos;, max_depth=None,                                             max_features=&apos;auto&apos;,                                             max_leaf_nodes=None,                                             max_samples=None,                                             min_impurity_decrease=0.0,                                             min_impurity_split=None,                                             min_samples_leaf=1,                                             min_samples_split=2,                                             min_weight_fraction_leaf=0.0,                                             n_estimators=100, n_jobs=-1,                                             oob_score=False, random_state=13,                                             verbose=0, warm_start=False),             iid=&apos;deprecated&apos;, n_jobs=-1,             param_grid={&apos;max_depth&apos;: [6, 8, 10, 12, 16, 20, 24],                         &apos;min_samples_leaf&apos;: [8, 12],                         &apos;min_samples_split&apos;: [8, 12],                         &apos;n_estimators&apos;: [50, 100, 150, 200]},             pre_dispatch=&apos;2*n_jobs&apos;, refit=True, return_train_score=True,             scoring=None, verbose=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_cv.best_params_</span><br></pre></td></tr></table></figure><pre><code>{&apos;max_depth&apos;: 16, &apos;min_samples_leaf&apos;: 8, &apos;min_samples_split&apos;: 8, &apos;n_estimators&apos;: 100}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid_cv.best_score_</span><br></pre></td></tr></table></figure><pre><code>0.9558424688563008</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv_results_df = pd.DataFrame(grid_cv.cv_results_)</span><br><span class="line">cv_results_df.columns</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;mean_fit_time&apos;, &apos;std_fit_time&apos;, &apos;mean_score_time&apos;, &apos;std_score_time&apos;,       &apos;param_max_depth&apos;, &apos;param_min_samples_leaf&apos;, &apos;param_min_samples_split&apos;,       &apos;param_n_estimators&apos;, &apos;params&apos;, &apos;split0_test_score&apos;,       &apos;split1_test_score&apos;, &apos;split2_test_score&apos;, &apos;split3_test_score&apos;,       &apos;split4_test_score&apos;, &apos;mean_test_score&apos;, &apos;std_test_score&apos;,       &apos;rank_test_score&apos;, &apos;split0_train_score&apos;, &apos;split1_train_score&apos;,       &apos;split2_train_score&apos;, &apos;split3_train_score&apos;, &apos;split4_train_score&apos;,       &apos;mean_train_score&apos;, &apos;std_train_score&apos;],      dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">'rank_test_score'</span>, <span class="string">'mean_test_score'</span>, <span class="string">'param_n_estimators'</span>, <span class="string">'param_max_depth'</span>]</span><br><span class="line">cv_results_df[cols].sort_values(<span class="string">'rank_test_score'</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>rank_test_score</th>      <th>mean_test_score</th>      <th>param_n_estimators</th>      <th>param_max_depth</th>    </tr>  </thead>  <tbody>    <tr>      <td>65</td>      <td>1</td>      <td>0.955842</td>      <td>100</td>      <td>16</td>    </tr>    <tr>      <td>69</td>      <td>1</td>      <td>0.955842</td>      <td>100</td>      <td>16</td>    </tr>    <tr>      <td>81</td>      <td>3</td>      <td>0.955842</td>      <td>100</td>      <td>20</td>    </tr>    <tr>      <td>101</td>      <td>3</td>      <td>0.955842</td>      <td>100</td>      <td>24</td>    </tr>    <tr>      <td>85</td>      <td>3</td>      <td>0.955842</td>      <td>100</td>      <td>20</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>11</td>      <td>107</td>      <td>0.947681</td>      <td>200</td>      <td>6</td>    </tr>    <tr>      <td>8</td>      <td>109</td>      <td>0.947502</td>      <td>50</td>      <td>6</td>    </tr>    <tr>      <td>12</td>      <td>109</td>      <td>0.947502</td>      <td>50</td>      <td>6</td>    </tr>    <tr>      <td>4</td>      <td>111</td>      <td>0.947374</td>      <td>50</td>      <td>6</td>    </tr>    <tr>      <td>0</td>      <td>111</td>      <td>0.947374</td>      <td>50</td>      <td>6</td>    </tr>  </tbody></table><p>112 rows × 4 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rf_reg_best = grid_cv.best_estimator_</span><br><span class="line">rf_reg_best.fit(X, y)</span><br></pre></td></tr></table></figure><pre><code>RandomForestRegressor(bootstrap=False, ccp_alpha=0.0, criterion=&apos;mse&apos;,                      max_depth=25, max_features=20, max_leaf_nodes=None,                      max_samples=None, min_impurity_decrease=0.0,                      min_impurity_split=None, min_samples_leaf=8,                      min_samples_split=8, min_weight_fraction_leaf=0.0,                      n_estimators=200, n_jobs=-1, oob_score=False,                      random_state=13, verbose=0, warm_start=False)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test = pd.read_csv(<span class="string">'datas/test.csv'</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hour= pd.Series((test.index%<span class="number">144</span>/<span class="number">6</span>).astype(int))</span><br><span class="line">test[<span class="string">'hour'</span>] = list(hour)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1 = test.drop(columns=[<span class="string">'X14'</span>, <span class="string">'X16'</span>, <span class="string">'X19'</span>, <span class="string">'id'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> direction_name:</span><br><span class="line">    test1[x] = test1[x].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x &lt; <span class="number">90</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">if</span> x &lt; <span class="number">180</span> <span class="keyword">else</span> <span class="number">2</span> <span class="keyword">if</span> x &lt; <span class="number">270</span> <span class="keyword">else</span> <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 북동 : 0 / 남동 : 1 / 남서 : 2 / 북서 : 3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> water_name:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(x)):</span><br><span class="line">        test1[x].loc[i] = test1[x].loc[i] - test1[x].loc[i<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> water_name:</span><br><span class="line">    test1[x] = test1[x].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">0</span>  <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><h2 id="TEST-데이터"><a href="#TEST-데이터" class="headerlink" title="TEST 데이터"></a>TEST 데이터</h2></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>X00</th>      <th>X01</th>      <th>X02</th>      <th>X03</th>      <th>X04</th>      <th>X05</th>      <th>X06</th>      <th>X07</th>      <th>X08</th>      <th>X09</th>      <th>...</th>      <th>X31</th>      <th>X32</th>      <th>X33</th>      <th>X34</th>      <th>X35</th>      <th>X36</th>      <th>X37</th>      <th>X38</th>      <th>X39</th>      <th>hour</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>18.7</td>      <td>987.4</td>      <td>1.5</td>      <td>1.3</td>      <td>0</td>      <td>1006.8</td>      <td>987.7</td>      <td>21.1</td>      <td>1007.5</td>      <td>1007.2</td>      <td>...</td>      <td>17.5</td>      <td>19.2</td>      <td>1007.6</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>84.0</td>      <td>59.9</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>18.8</td>      <td>987.4</td>      <td>1.1</td>      <td>1.2</td>      <td>0</td>      <td>1006.7</td>      <td>987.7</td>      <td>21.2</td>      <td>1007.5</td>      <td>1007.2</td>      <td>...</td>      <td>17.4</td>      <td>19.1</td>      <td>1007.5</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>84.0</td>      <td>60.5</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>19.0</td>      <td>987.4</td>      <td>1.3</td>      <td>1.2</td>      <td>0</td>      <td>1006.6</td>      <td>987.6</td>      <td>21.2</td>      <td>1007.4</td>      <td>1007.2</td>      <td>...</td>      <td>17.2</td>      <td>19.0</td>      <td>1007.5</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>85.0</td>      <td>60.8</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>18.7</td>      <td>987.4</td>      <td>2.3</td>      <td>0.8</td>      <td>0</td>      <td>1006.6</td>      <td>987.6</td>      <td>21.1</td>      <td>1007.4</td>      <td>1007.2</td>      <td>...</td>      <td>17.2</td>      <td>18.8</td>      <td>1007.4</td>      <td>0.00</td>      <td>2</td>      <td>0</td>      <td>85.8</td>      <td>61.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>18.4</td>      <td>987.4</td>      <td>1.1</td>      <td>0.7</td>      <td>0</td>      <td>1006.7</td>      <td>987.7</td>      <td>20.9</td>      <td>1007.5</td>      <td>1007.2</td>      <td>...</td>      <td>17.4</td>      <td>18.9</td>      <td>1007.5</td>      <td>0.00</td>      <td>1</td>      <td>0</td>      <td>87.3</td>      <td>61.7</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>11515</td>      <td>25.7</td>      <td>993.2</td>      <td>3.9</td>      <td>3.8</td>      <td>0</td>      <td>1011.7</td>      <td>993.8</td>      <td>26.3</td>      <td>1013.3</td>      <td>1012.6</td>      <td>...</td>      <td>23.6</td>      <td>24.4</td>      <td>1013.0</td>      <td>19.56</td>      <td>1</td>      <td>0</td>      <td>79.7</td>      <td>67.5</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>11516</td>      <td>25.6</td>      <td>993.2</td>      <td>3.0</td>      <td>3.0</td>      <td>0</td>      <td>1011.7</td>      <td>993.8</td>      <td>26.3</td>      <td>1013.3</td>      <td>1012.6</td>      <td>...</td>      <td>25.3</td>      <td>24.4</td>      <td>1012.9</td>      <td>19.56</td>      <td>1</td>      <td>0</td>      <td>79.6</td>      <td>67.9</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>11517</td>      <td>25.6</td>      <td>993.2</td>      <td>3.8</td>      <td>2.5</td>      <td>0</td>      <td>1011.9</td>      <td>993.7</td>      <td>26.2</td>      <td>1013.2</td>      <td>1012.7</td>      <td>...</td>      <td>24.9</td>      <td>24.3</td>      <td>1012.9</td>      <td>19.56</td>      <td>2</td>      <td>0</td>      <td>79.2</td>      <td>68.3</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>11518</td>      <td>25.5</td>      <td>993.2</td>      <td>2.4</td>      <td>2.8</td>      <td>0</td>      <td>1011.8</td>      <td>993.7</td>      <td>26.1</td>      <td>1013.2</td>      <td>1012.6</td>      <td>...</td>      <td>25.3</td>      <td>24.2</td>      <td>1012.9</td>      <td>19.56</td>      <td>1</td>      <td>0</td>      <td>80.1</td>      <td>68.8</td>      <td>1</td>      <td>23</td>    </tr>    <tr>      <td>11519</td>      <td>25.4</td>      <td>993.2</td>      <td>3.0</td>      <td>3.5</td>      <td>0</td>      <td>1011.9</td>      <td>993.6</td>      <td>26.0</td>      <td>1013.1</td>      <td>1012.6</td>      <td>...</td>      <td>25.4</td>      <td>24.3</td>      <td>1012.9</td>      <td>19.56</td>      <td>2</td>      <td>0</td>      <td>80.2</td>      <td>68.9</td>      <td>1</td>      <td>23</td>    </tr>  </tbody></table><p>11520 rows × 38 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">answer = rf_reg_best.predict(test1).round(<span class="number">2</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>array([19.62, 19.61, 19.61, ..., 26.06, 24.58, 24.46])</code></pre><blockquote><h2 id="결과는"><a href="#결과는" class="headerlink" title="결과는?"></a>결과는?</h2></blockquote>{% asset_img rf.png %}{% asset_img final.png %}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">answer_df = pd.DataFrame(answer)</span><br><span class="line">answer_df.rename(columns=&#123;</span><br><span class="line">    <span class="number">0</span> : <span class="string">'Y18'</span></span><br><span class="line">&#125;, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">answer_df[<span class="string">'id'</span>] = test[<span class="string">'id'</span>]</span><br><span class="line">answer_df = answer_df[[<span class="string">'id'</span>, <span class="string">'Y18'</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer_df.to_csv(<span class="string">'submission_0412.csv'</span>, index=<span class="literal">False</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer_df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>id</th>      <th>Y18</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>4752</td>      <td>19.62</td>    </tr>    <tr>      <td>1</td>      <td>4753</td>      <td>19.61</td>    </tr>    <tr>      <td>2</td>      <td>4754</td>      <td>19.61</td>    </tr>    <tr>      <td>3</td>      <td>4755</td>      <td>18.68</td>    </tr>    <tr>      <td>4</td>      <td>4756</td>      <td>19.52</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>11515</td>      <td>16267</td>      <td>25.63</td>    </tr>    <tr>      <td>11516</td>      <td>16268</td>      <td>26.11</td>    </tr>    <tr>      <td>11517</td>      <td>16269</td>      <td>26.06</td>    </tr>    <tr>      <td>11518</td>      <td>16270</td>      <td>24.58</td>    </tr>    <tr>      <td>11519</td>      <td>16271</td>      <td>24.46</td>    </tr>  </tbody></table><p>11520 rows × 2 columns</p></div>]]></content:encoded>
      
      <comments>https://yangjun-ux.github.io/2020/04/18/final_blog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>구찌 크롤링 데이터를 활용한 비슷한 이미지 출력(간단한 머신러닝)</title>
      <link>https://yangjun-ux.github.io/2020/04/17/similar_gucci/</link>
      <guid>https://yangjun-ux.github.io/2020/04/17/similar_gucci/</guid>
      <pubDate>Fri, 17 Apr 2020 08:45:00 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;비슷한-구찌-가방-찾기&quot;&gt;&lt;a href=&quot;#비슷한-구찌-가방-찾기&quot; class=&quot;headerlink&quot; title=&quot;비슷한 구찌 가방 찾기!&quot;&gt;&lt;/a&gt;비슷한 구찌 가방 찾기!&lt;/h3&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="비슷한-구찌-가방-찾기"><a href="#비슷한-구찌-가방-찾기" class="headerlink" title="비슷한 구찌 가방 찾기!"></a>비슷한 구찌 가방 찾기!</h3><a id="more"></a><blockquote><h2 id="GUCCI-사이트-크롤링-데이터를-활용한-유사한-이미지-찾기"><a href="#GUCCI-사이트-크롤링-데이터를-활용한-유사한-이미지-찾기" class="headerlink" title="GUCCI 사이트 크롤링 데이터를 활용한 유사한 이미지 찾기"></a>GUCCI 사이트 크롤링 데이터를 활용한 유사한 이미지 찾기</h2></blockquote><ul><li>직접 작성한 구찌 크롤링 코드를 활용하여 가방 사진을 다운받은 후 이를 활용하여 비슷한 이미지를 찾는다</li></ul><blockquote><h3 id="1-이미지-다운로드"><a href="#1-이미지-다운로드" class="headerlink" title="1. 이미지 다운로드"></a>1. 이미지 다운로드</h3></blockquote><ul><li><code>pip install Boutique_crawling</code>으로 다운로드 받아도 된다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 크롤링 코드</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bags</span><span class="params">()</span>:</span></span><br><span class="line">    pages = <span class="number">10</span></span><br><span class="line">    title = []</span><br><span class="line">    price = []</span><br><span class="line">    sex = []</span><br><span class="line">    img = []</span><br><span class="line">    dfs = []</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">        url = <span class="string">"https://www.gucci.com/kr/ko/c/productgrid?categoryCode=men-bags&amp;show=Page&amp;page=&#123;&#125;"</span>.format(page)</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        print(<span class="string">"여자 가방 &#123;&#125;페이지 크롤링 중 입니다..."</span>.format(page))</span><br><span class="line">        a = response.json()[<span class="string">'products'</span>]</span><br><span class="line">        b = a[<span class="string">'items'</span>]</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            title.append(b[idx][<span class="string">'title'</span>])</span><br><span class="line">            price.append(b[idx][<span class="string">'price'</span>])</span><br><span class="line">            img.append(b[idx][<span class="string">'primaryImage'</span>][<span class="string">'src'</span>][<span class="number">2</span>:])</span><br><span class="line">            sex.append(<span class="string">'Men'</span>)</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">        url = <span class="string">"https://www.gucci.com/kr/ko/c/productgrid?categoryCode=women-handbags&amp;show=Page&amp;page=&#123;&#125;"</span>.format(page)</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        print(<span class="string">"남자 가방 &#123;&#125;페이지 크롤링 중 입니다..."</span>.format(page))</span><br><span class="line">        a = response.json()[<span class="string">'products'</span>]</span><br><span class="line">        b = a[<span class="string">'items'</span>]</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            title.append(b[idx][<span class="string">'title'</span>])</span><br><span class="line">            price.append(b[idx][<span class="string">'price'</span>])</span><br><span class="line">            img.append(b[idx][<span class="string">'primaryImage'</span>][<span class="string">'src'</span>][<span class="number">2</span>:])</span><br><span class="line">            sex.append(<span class="string">'Women'</span>)</span><br><span class="line">    title_df = pd.DataFrame(title)</span><br><span class="line">    price_df = pd.DataFrame(price)</span><br><span class="line">    img_df = pd.DataFrame(img)</span><br><span class="line">    sex_df = pd.DataFrame(sex)</span><br><span class="line">    dfs.append(title_df)</span><br><span class="line">    dfs.append(price_df)</span><br><span class="line">    dfs.append(img_df)</span><br><span class="line">    dfs.append(sex_df)</span><br><span class="line">    gucci_bags_df = pd.concat(dfs, axis=<span class="number">1</span>)</span><br><span class="line">    gucci_bags_df.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    gucci_bags_df[<span class="string">'brand'</span>] = <span class="string">'GUCCI'</span></span><br><span class="line">    gucci_bags_df.columns = [<span class="string">'title'</span>, <span class="string">'price'</span>, <span class="string">'image'</span>, <span class="string">'sex'</span>, <span class="string">'brand'</span>]</span><br><span class="line">    gucci_bags_df = gucci_bags_df[[<span class="string">'brand'</span>, <span class="string">'title'</span>, <span class="string">'price'</span>, <span class="string">'sex'</span>, <span class="string">'image'</span>]]</span><br><span class="line">    a = list(gucci_bags_df[<span class="string">'price'</span>])</span><br><span class="line">    ls = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">        num = re.findall(<span class="string">"\d+"</span>, x)</span><br><span class="line">        num = <span class="string">""</span>.join(num)</span><br><span class="line">        num = int(num)</span><br><span class="line">        ls.append(num)</span><br><span class="line">    gucci_bags_df[<span class="string">'price'</span>] = ls</span><br><span class="line">    gucci_bags_df.to_csv(<span class="string">"gucci_bags.csv"</span>, index=<span class="literal">False</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    print(<span class="string">"사진 저장을 시작합니다"</span>)</span><br><span class="line">    <span class="keyword">for</span> idx, link <span class="keyword">in</span> enumerate(img):</span><br><span class="line">        url = <span class="string">"http://"</span> + link</span><br><span class="line">        urllib.request.urlretrieve(url, <span class="string">'bags/'</span> + <span class="string">'g'</span> + str(idx) + <span class="string">'.jpg'</span>)</span><br><span class="line">    <span class="keyword">return</span> gucci_bags_df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 코드 실행</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">bags()</span><br></pre></td></tr></table></figure><pre><code>여자 가방 1페이지 크롤링 중 입니다...여자 가방 2페이지 크롤링 중 입니다...여자 가방 3페이지 크롤링 중 입니다...여자 가방 4페이지 크롤링 중 입니다...여자 가방 5페이지 크롤링 중 입니다...여자 가방 6페이지 크롤링 중 입니다...여자 가방 7페이지 크롤링 중 입니다...여자 가방 8페이지 크롤링 중 입니다...여자 가방 9페이지 크롤링 중 입니다...여자 가방 10페이지 크롤링 중 입니다...남자 가방 1페이지 크롤링 중 입니다...남자 가방 2페이지 크롤링 중 입니다...남자 가방 3페이지 크롤링 중 입니다...남자 가방 4페이지 크롤링 중 입니다...남자 가방 5페이지 크롤링 중 입니다...남자 가방 6페이지 크롤링 중 입니다...남자 가방 7페이지 크롤링 중 입니다...남자 가방 8페이지 크롤링 중 입니다...남자 가방 9페이지 크롤링 중 입니다...남자 가방 10페이지 크롤링 중 입니다...사진 저장을 시작합니다</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>brand</th>      <th>title</th>      <th>price</th>      <th>sex</th>      <th>image</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>GUCCI</td>      <td>[오피디아] GG 서류 가방</td>      <td>2470000</td>      <td>Men</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>1</td>      <td>GUCCI</td>      <td>[오피디아] GG 화장품 케이스</td>      <td>990000</td>      <td>Men</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>2</td>      <td>GUCCI</td>      <td>[오피디아] GG 파우치</td>      <td>1220000</td>      <td>Men</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>3</td>      <td>GUCCI</td>      <td>[오피디아] 스몰 사이즈 GG 백팩</td>      <td>2080000</td>      <td>Men</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>4</td>      <td>GUCCI</td>      <td>[오피디아] GG 수프림 포트폴리오</td>      <td>1240000</td>      <td>Men</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>296</td>      <td>GUCCI</td>      <td>[네오 빈티지] GG 수프림 메신저 백</td>      <td>1410000</td>      <td>Women</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>297</td>      <td>GUCCI</td>      <td>[네오 빈티지] 백팩</td>      <td>2460000</td>      <td>Women</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>298</td>      <td>GUCCI</td>      <td>소호 스몰 가죽 디스코 백</td>      <td>1450000</td>      <td>Women</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>299</td>      <td>GUCCI</td>      <td>[소호] 스몰 가죽 디스코 백</td>      <td>1450000</td>      <td>Women</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>    <tr>      <td>300</td>      <td>GUCCI</td>      <td>[GG 마몽] 스몰 마틀라세 숄더백</td>      <td>2720000</td>      <td>Women</td>      <td>media.gucci.com/style/DarkGray_South_0_160_316...</td>    </tr>  </tbody></table><p>301 rows × 5 columns</p></div><blockquote><h3 id="확보한-사진-데이터를-활용하여-간단한-머신러닝을-해보자"><a href="#확보한-사진-데이터를-활용하여-간단한-머신러닝을-해보자" class="headerlink" title="확보한 사진 데이터를 활용하여 간단한 머신러닝을 해보자!"></a>확보한 사진 데이터를 활용하여 간단한 머신러닝을 해보자!</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mahotas <span class="keyword">as</span> mh</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br></pre></td></tr></table></figure><blockquote><h3 id="이미지-불러오기"><a href="#이미지-불러오기" class="headerlink" title="이미지 불러오기"></a>이미지 불러오기</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># images = glob('bags/*.jpg')</span></span><br><span class="line">images = glob(<span class="string">'bags/*.jpg'</span>)</span><br><span class="line">images</span><br></pre></td></tr></table></figure><pre><code>[&apos;bags/g269.jpg&apos;, ... 중간 생략 &apos;bags/g270.jpg&apos;]</code></pre><blockquote><h3 id="이미지를-배열로-만들기-amp-grey로-만들기"><a href="#이미지를-배열로-만들기-amp-grey로-만들기" class="headerlink" title="이미지를 배열로 만들기 &amp; grey로 만들기"></a>이미지를 배열로 만들기 &amp; grey로 만들기</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">features = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> im <span class="keyword">in</span> images:</span><br><span class="line">    im = mh.imread(im)</span><br><span class="line">    im = mh.colors.rgb2gray(im, dtype=np.uint8)</span><br><span class="line">    features.append(mh.features.haralick(im).ravel())</span><br></pre></td></tr></table></figure><blockquote><h3 id="각-사진-별-거리구하기"><a href="#각-사진-별-거리구하기" class="headerlink" title="각 사진 별 거리구하기"></a>각 사진 별 거리구하기</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> distance</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">sc = StandardScaler()</span><br><span class="line">features = sc.fit_transform(features)</span><br><span class="line"></span><br><span class="line">dists = distance.squareform(distance.pdist(features))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dists</span><br></pre></td></tr></table></figure><pre><code>array([[ 0.        ,  6.626829  , 10.96937821, ...,  6.41357824,         7.76924545,  5.18205591],       [ 6.626829  ,  0.        ,  7.80597792, ...,  8.07493656,         4.2529202 ,  6.68458331],       [10.96937821,  7.80597792,  0.        , ..., 12.43831703,         6.09376376, 11.31567013],       ...,       [ 6.41357824,  8.07493656, 12.43831703, ...,  0.        ,         7.56989192,  1.70162557],       [ 7.76924545,  4.2529202 ,  6.09376376, ...,  7.56989192,         0.        ,  6.37412609],       [ 5.18205591,  6.68458331, 11.31567013, ...,  1.70162557,         6.37412609,  0.        ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectImage</span><span class="params">(n, m, dists, images)</span>:</span></span><br><span class="line">    image_position = dists[n].argsort()[m]</span><br><span class="line">    image = mh.imread(images[image_position])</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotImages</span><span class="params">(n)</span>:</span></span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">4</span>, figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        ax[i].imshow(selectImage(n, i, dists, images))</span><br><span class="line">        ax[i].set_xticks([])</span><br><span class="line">        ax[i].set_yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><blockquote><h3 id="grey로-바꾼-후의-비슷한-가방-모양-찾기"><a href="#grey로-바꾼-후의-비슷한-가방-모양-찾기" class="headerlink" title="grey로 바꾼 후의 비슷한 가방 모양 찾기"></a>grey로 바꾼 후의 비슷한 가방 모양 찾기</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plotImages(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><img src="/2020/04/17/similar_gucci/similar_gucci_16_0.png" class><blockquote><h3 id="색을-그대로-두면-어떨까"><a href="#색을-그대로-두면-어떨까" class="headerlink" title="색을 그대로 두면 어떨까?"></a>색을 그대로 두면 어떨까?</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">features_c = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> im <span class="keyword">in</span> images:</span><br><span class="line">    im = mh.imread(im)</span><br><span class="line">    features_c.append(mh.features.haralick(im).ravel())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> distance</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">sc = StandardScaler()</span><br><span class="line">features_c = sc.fit_transform(features_c)</span><br><span class="line"></span><br><span class="line">dists_c = distance.squareform(distance.pdist(features_c))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectImage_c</span><span class="params">(n, m, dists, images)</span>:</span></span><br><span class="line">    image_position = dists_c[n].argsort()[m]</span><br><span class="line">    image = mh.imread(images[image_position])</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotImages_c</span><span class="params">(n)</span>:</span></span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>,<span class="number">4</span>, figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        ax[i].imshow(selectImage_c(n, i, dists, images))</span><br><span class="line">        ax[i].set_xticks([])</span><br><span class="line">        ax[i].set_yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><blockquote><h3 id="색을-그대로-두면-RGB-값이-다-살아있기-때문에-색이-비슷한-가방을-우선적으로-찾아준다"><a href="#색을-그대로-두면-RGB-값이-다-살아있기-때문에-색이-비슷한-가방을-우선적으로-찾아준다" class="headerlink" title="색을 그대로 두면 RGB 값이 다 살아있기 때문에 색이 비슷한 가방을 우선적으로 찾아준다"></a>색을 그대로 두면 RGB 값이 다 살아있기 때문에 색이 비슷한 가방을 우선적으로 찾아준다</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plotImages_c(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><img src="/2020/04/17/similar_gucci/similar_gucci_23_0.png" class>]]></content:encoded>
      
      <comments>https://yangjun-ux.github.io/2020/04/17/similar_gucci/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
